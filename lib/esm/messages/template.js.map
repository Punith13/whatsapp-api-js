{
  "version": 3,
  "sources": ["../../../src/types.ts", "../../../src/messages/template.ts"],
  "sourcesContent": ["import type { fetch as FetchType } from \"undici\";\nimport type { subtle as CryptoSubtle } from \"node:crypto\";\n\n/**\n * The main constructor arguments for the API\n */\nexport type TheBasicConstructorArguments = {\n    /**\n     * The API token, given at setup.\n     * You must provide an API token to use the framework.\n     *\n     * It can either be a temporal or permanent one.\n     *\n     * In order to create a permanent token, first make sure you have\n     * linked your WhatsApp account to a Meta Commercial Account in\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps).\n     *\n     * After that, head to [Bussiness Settings](https://business.facebook.com/settings/system-users),\n     * select your app, create a new system user with `admin role`.\n     * Then click \"Add Actives\", select Apps -\\> Your App -\\> App Administrator.\n     *\n     * And this was the point were Meta decided I was too sus because\n     * I created a second bussiness to follow my own tutorial,\n     * and as I didn't want to give them my ID, they banned my account.\n     *\n     * If you read until here, you probably will figure it out.\n     * It's not that hard after getting in the right place.\n     *\n     * Really wish WhatsApp gets away from Meta soon...\n     *\n     * (Sorry for the rant, here's the [actual documentation](https://developers.facebook.com/docs/whatsapp/business-management-api/get-started))\n     */\n    token: string;\n    /**\n     * The app secret, given at setup.\n     *\n     * The secret is used as a signature to validate payload's authenticity.\n     *\n     * To get your app secret, head to\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps),\n     * select your app and open Settings -\\> Basic -\\> App Secret -\\> Show.\n     *\n     * If you want to skip the verification and remove the need to provide the secret,\n     * set `secure` to `false`.\n     */\n    appSecret?: string | never;\n    /**\n     * The webhook verify token, configured at setup.\n     * Used exclusively to verify the server against WhatsApp's servers via the GET method.\n     *\n     * Not required by default, but calling this.get() without it will result in an error.\n     */\n    webhookVerifyToken?: string;\n    /**\n     * The version of the API, defaults to v16.0\n     */\n    v?: string;\n    /**\n     * Whether to return a pre-processed response from the API or the raw fetch response.\n     * Intended for low level debugging.\n     */\n    parsed?: boolean;\n    /**\n     * If set to false, none of the API checks will be performed, and it will be used in a less secure way.\n     *\n     * Defaults to true.\n     */\n    secure?: boolean;\n    /**\n     * The ponyfills to use.\n     *\n     * This are meant to provide standard APIs implementations\n     * on enviroments that don't have them.\n     *\n     * For example, if using Node 16, you will need to ponyfill\n     * the fetch method with any spec complient fetch method.\n     *\n     * @remarks\n     * With the additions of {@link setup} for the most common enviroments,\n     * this parameter should no longer be configured manually.\n     *\n     * @example\n     * ```ts\n     * import { fetch } from \"undici\";\n     * import { subtle } from \"node:crypto\";\n     *\n     * const api = new WhatsAppAPI({\n     *     token: \"my-token\",\n     *     appSecret: \"my-app-secret\",\n     *     ponyfill: {\n     *         fetch,\n     *         subtle\n     *     }\n     * });\n     * ```\n     */\n    ponyfill?: {\n        /**\n         * The fetch ponyfill to use for the requests. If not specified, it defaults to the fetch function from the enviroment.\n         */\n        fetch?: typeof FetchType;\n        /**\n         * The subtle ponyfill to use for the signatures. If not specified, it defaults to crypto.subtle from the enviroment.\n         */\n        subtle?: typeof CryptoSubtle;\n    };\n};\n\n/**\n * This switch allows TypeScript to cry if appSecret is not provided when secure is true.\n */\nexport type SecureLightSwitch =\n    | {\n          secure?: true;\n          appSecret: string;\n      }\n    | {\n          secure: false;\n          appSecret?: never;\n      };\n\n/**\n * Created this type if in the future the constructor needs more complex types.\n */\nexport type ExtraTypesThatMakeTypescriptWork = SecureLightSwitch;\n\n/**\n * Monkey patching TypeDoc inability to handle complex types.\n *\n * You should absolutely read {@link TheBasicConstructorArguments} in order to use the framework.\n */\nexport type WhatsAppAPIConstructorArguments = TheBasicConstructorArguments &\n    ExtraTypesThatMakeTypescriptWork;\n\nexport abstract class ClientMessage {\n    /**\n     * The message type\n     *\n     * @internal\n     */\n    abstract get _type(): ClientMessageNames;\n    /**\n     * The message built as a string. In most cases it's just JSON.stringify(this)\n     *\n     * @internal\n     */\n    _build(): string {\n        return JSON.stringify(this);\n    }\n}\n\nexport interface ClientTypedMessageComponent {\n    /**\n     * The message's component type\n     *\n     * @internal\n     */\n    get _type(): string;\n}\n\nexport abstract class ClientBuildableMessageComponent {\n    /**\n     * The message's component builder method\n     *\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _build(..._: unknown[]): unknown {\n        return this;\n    }\n}\n\nexport abstract class ClientLimitedMessageComponent<T, N extends number> {\n    /**\n     * Throws an error if the array length is greater than the specified number.\n     *\n     * @param p - The parent component name\n     * @param c - The component name\n     * @param a - The array to check the length of\n     * @param n - The maximum length\n     */\n    constructor(p: string, c: string, a: Array<T>, n: N) {\n        if (a.length > n) {\n            throw new Error(`${p} can't have more than ${n} ${c}`);\n        }\n    }\n}\n\n// Somehow, Contacts still manages to be annoying\nexport abstract class ContactComponent\n    implements ClientTypedMessageComponent, ClientBuildableMessageComponent\n{\n    /**\n     * @override\n     */\n    _build(): unknown {\n        return this;\n    }\n\n    /**\n     * Whether the component can be repeated multiple times in a contact.\n     *\n     * @internal\n     */\n    abstract get _many(): boolean;\n    abstract get _type(): string;\n}\n\n/**\n * A contact multiple component can be repeated multiple times in a contact.\n *\n * @internal\n */\nexport abstract class ContactMultipleComponent extends ContactComponent {\n    /**\n     * @override\n     */\n    get _many(): true {\n        return true;\n    }\n\n    abstract get _type(): string;\n}\n\n/**\n * A contact unique component can only be used once in a contact.\n *\n * @internal\n */\nexport abstract class ContactUniqueComponent extends ContactComponent {\n    /**\n     * @override\n     */\n    get _many(): false {\n        return false;\n    }\n\n    abstract get _type(): string;\n}\n\nexport type ClientMessageNames =\n    | \"text\"\n    | \"audio\"\n    | \"document\"\n    | \"image\"\n    | \"sticker\"\n    | \"video\"\n    | \"location\"\n    | \"contacts\"\n    | \"interactive\"\n    | \"template\"\n    | \"reaction\";\n\n// #region Client Message Request\n\nexport type ClientMessageRequest =\n    | {\n          /**\n           * The messaging product\n           */\n          messaging_product: \"whatsapp\";\n          /**\n           * The user's phone number\n           */\n          to: string;\n          /**\n           * Undocumented, optional (the framework doesn't use it)\n           */\n          recipient_type?: \"individual\";\n          /**\n           * The message to reply to\n           */\n          context?: {\n              /**\n               * The message id to reply to\n               */\n              message_id: string;\n          };\n      } & (\n          | {\n                type: \"text\";\n                text?: string;\n            }\n          | {\n                type: \"audio\";\n                audio?: string;\n            }\n          | {\n                type: \"document\";\n                document?: string;\n            }\n          | {\n                type: \"image\";\n                image?: string;\n            }\n          | {\n                type: \"sticker\";\n                sticker?: string;\n            }\n          | {\n                type: \"video\";\n                video?: string;\n            }\n          | {\n                type: \"location\";\n                location?: string;\n            }\n          | {\n                type: \"contacts\";\n                contacts?: string;\n            }\n          | {\n                type: \"interactive\";\n                interactive?: string;\n            }\n          | {\n                type: \"template\";\n                template?: string;\n            }\n          | {\n                type: \"reaction\";\n                reaction?: string;\n            }\n      );\n\n// #endregion\n\nexport type ServerTextMessage = {\n    type: \"text\";\n    text: {\n        body: string;\n    };\n};\n\nexport type ServerAudioMessage = {\n    type: \"audio\";\n    audio: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerDocumentMessage = {\n    type: \"document\";\n    document: {\n        caption?: string;\n        filename: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerImageMessage = {\n    type: \"image\";\n    image: {\n        caption?: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerStickerMessage = {\n    type: \"sticker\";\n    sticker: {\n        id: string;\n        animated: boolean;\n        mime_type: \"image/webp\";\n        sha256: string;\n    };\n};\n\nexport type ServerVideoMessage = {\n    type: \"video\";\n    video: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerLocationMessage = {\n    type: \"location\";\n    location: {\n        latitude: string;\n        longitude: string;\n        name?: string;\n        address?: string;\n    };\n};\n\nexport type ServerContactsMessage = {\n    type: \"contacts\";\n    contacts: [\n        {\n            addresses?: [\n                {\n                    city?: string;\n                    country?: string;\n                    country_code?: string;\n                    state?: string;\n                    street?: string;\n                    type?: string;\n                    zip?: string;\n                }\n            ];\n            birthday?: string;\n            emails?: [\n                {\n                    email?: string;\n                    type?: string;\n                }\n            ];\n            name: {\n                formatted_name: string;\n                first_name?: string;\n                last_name?: string;\n                middle_name?: string;\n                suffix?: string;\n                prefix?: string;\n            };\n            org?: {\n                company?: string;\n                department?: string;\n                title?: string;\n            };\n            phones?: [\n                {\n                    phone?: string;\n                    wa_id?: string;\n                    type?: string;\n                }\n            ];\n            urls?: [\n                {\n                    url?: string;\n                    type?: string;\n                }\n            ];\n        }\n    ];\n};\n\nexport type ServerInteractiveMessage = {\n    type: \"interactive\";\n    interactive:\n        | {\n              type: \"button_reply\";\n              button_reply: {\n                  id: string;\n                  title: string;\n              };\n              list_reply: never;\n          }\n        | {\n              type: \"list_reply\";\n              list_reply: {\n                  id: string;\n                  title: string;\n                  description: string;\n              };\n              button_reply: never;\n          };\n};\n\nexport type ServerButtonMessage = {\n    type: \"button\";\n    button: {\n        text: string;\n        payload: string;\n    };\n};\n\nexport type ServerReactionMessage = {\n    type: \"reaction\";\n    reaction: {\n        emoji: string;\n        messsage_id: string;\n    };\n};\n\nexport type ServerOrderMessage = {\n    type: \"order\";\n    order: {\n        catalog_id: string;\n        product_items: [\n            {\n                product_retailer_id: string;\n                quantity: string;\n                item_price: string;\n                currency: string;\n            }\n        ];\n        text?: string;\n    };\n};\n\nexport type ServerSystemMessage = {\n    type: \"system\";\n    system: {\n        body: string;\n        new_wa_id: number | string; // TODO: check if this is always a number\n        type: string | \"user_changed_number\";\n    };\n};\n\nexport type ServerUnknownMessage = {\n    type: \"unknown\";\n    errors: [\n        {\n            code: number;\n            details: \"Message type is not currently supported\";\n            title: \"Unsupported message type\";\n        }\n    ];\n};\n\nexport type ServerMessageTypes =\n    | ServerTextMessage\n    | ServerAudioMessage\n    | ServerDocumentMessage\n    | ServerImageMessage\n    | ServerStickerMessage\n    | ServerVideoMessage\n    | ServerLocationMessage\n    | ServerContactsMessage\n    | ServerInteractiveMessage\n    | ServerButtonMessage\n    | ServerReactionMessage\n    | ServerOrderMessage\n    | ServerUnknownMessage;\n\nexport type ServerMessage = {\n    from: string;\n    id: string;\n    timestamp: string;\n    context?: {\n        forwarded?: boolean;\n        frequently_forwarded?: boolean;\n        from?: string;\n        id?: string;\n        referred_product?: {\n            catalog_id: string;\n            product_retailer_id: string;\n        };\n    };\n    identity?: {\n        acknowledged: boolean;\n        created_timestamp: number;\n        hash: string;\n    };\n    referral?: {\n        source_url: string;\n        source_id: string;\n        source_type: string;\n        headline: string;\n        body: string;\n        media_type: string;\n        image_url: string;\n        video_url: string;\n        thumbnail_url: string;\n    };\n} & ServerMessageTypes;\n\nexport type ServerContacts = {\n    profile: {\n        name?: string;\n    };\n    wa_id: string;\n};\n\nexport type ServerInitiation =\n    | \"user_initiated\"\n    | \"business_initated\"\n    | \"referral_conversion\";\n\nexport type ServerStatus = \"sent\" | \"delivered\" | \"read\" | \"failed\" | \"deleted\";\n\nexport type ServerPricing = {\n    pricing_model: \"CBP\";\n    billable: boolean;\n    category: ServerInitiation;\n};\n\nexport type ServerConversation = {\n    id: string;\n    expiration_timestamp: number;\n    origin: {\n        type: ServerInitiation;\n    };\n};\n\nexport type ServerError = {\n    code: string;\n    title: string;\n};\n\nexport type GetParams = {\n    \"hub.mode\": \"subscribe\";\n    \"hub.verify_token\": string;\n    \"hub.challenge\": string;\n};\n\nexport type PostData = {\n    object: \"whatsapp_business_account\";\n    entry: {\n        id: string;\n        changes: {\n            value:\n                | {\n                      messaging_product: \"whatsapp\";\n                      metadata: {\n                          display_phone_number: string;\n                          phone_number_id: string;\n                      };\n                  } & (\n                      | {\n                            contacts: [ServerContacts];\n                            messages: [ServerMessage];\n                        }\n                      | {\n                            statuses: [\n                                {\n                                    id: string;\n                                    status: ServerStatus;\n                                    timestamp: string;\n                                    recipient_id: string;\n                                } & (\n                                    | {\n                                          conversation: ServerConversation;\n                                          pricing: ServerPricing;\n                                          errors: undefined;\n                                      }\n                                    | {\n                                          conversation: undefined;\n                                          pricing: undefined;\n                                          errors: [ServerError];\n                                      }\n                                )\n                            ];\n                        }\n                  );\n            field: \"messages\";\n        }[];\n    }[];\n};\n\n/**\n * @see https://developers.facebook.com/docs/whatsapp/cloud-api/support/error-codes\n */\nexport type ServerErrorResponse = {\n    error: {\n        message: string;\n        type: string;\n        code: number;\n        error_data: {\n            messaging_product: \"whatsapp\";\n            details: string;\n        };\n        error_subcode: number;\n        fbtrace_id: string;\n    };\n};\n\nexport type ServerSuccessResponse = {\n    success: true;\n};\n\nexport type ServerSentMessageResponse = {\n    messaging_product: \"whatsapp\";\n    contacts: [\n        {\n            input: string;\n            wa_id: string;\n        }\n    ];\n    messages: [\n        {\n            id: string;\n        }\n    ];\n};\n\nexport type ServerMessageResponse =\n    | ServerSentMessageResponse\n    | ServerErrorResponse;\n\nexport type ServerMarkAsReadResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerQR = {\n    code: string;\n    prefilled_message: string;\n    deep_link_url: string;\n    qr_image_url?: string;\n};\n\nexport type ServerCreateQRResponse = ServerQR | ServerErrorResponse;\n\nexport type ServerRetrieveQRResponse =\n    | {\n          data: ServerQR[];\n      }\n    | ServerErrorResponse;\n\nexport type ServerUpdateQRResponse = ServerQR | ServerErrorResponse;\n\nexport type ServerDeleteQRResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerMedia = {\n    id: string;\n};\n\nexport type ServerMediaUploadResponse = ServerMedia | ServerErrorResponse;\n\nexport type ValidMimeTypes =\n    | \"audio/aac\"\n    | \"audio/mp4\"\n    | \"audio/mpeg\"\n    | \"audio/amr\"\n    | \"audio/ogg\"\n    | \"text/plain\"\n    | \"application/pdf\"\n    | \"application/vnd.ms-powerpoint\"\n    | \"application/msword\"\n    | \"application/vnd.ms-excel\"\n    | \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n    | \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    | \"image/jpeg\"\n    | \"image/png\"\n    | \"video/mp4\"\n    | \"video/3gp\"\n    | \"image/webp\";\n\nexport type ServerMediaRetrieveResponse =\n    | ({\n          messaging_product: \"whatsapp\";\n          url: string;\n          mime_type: ValidMimeTypes;\n          sha256: string;\n          file_size: string;\n      } & ServerMedia)\n    | ServerErrorResponse;\n\nexport type ServerMediaDeleteResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n", "import {\n    ClientMessage,\n    ClientLimitedMessageComponent,\n    type ClientBuildableMessageComponent,\n    type ClientTypedMessageComponent\n} from \"../types.js\";\nimport type { AtLeastOne } from \"../utils\";\n\nimport type Location from \"./location\";\nimport type { Document, Image, Video } from \"./media\";\n\n/**\n * @group Template\n */\nexport type BuiltButtonComponent = {\n    type: \"button\";\n    sub_type: \"url\" | \"quick_reply\";\n    index: string;\n    parameters: Array<ButtonParameter>;\n};\n\n/**\n * Template API object\n *\n * @group Template\n */\nexport class Template extends ClientMessage {\n    /**\n     * The name of the template\n     */\n    readonly name: string;\n    /**\n     * The language of the template\n     */\n    readonly language: Language;\n    /**\n     * The components of the template\n     */\n    readonly components?: (\n        | HeaderComponent\n        | BodyComponent\n        | BuiltButtonComponent\n    )[];\n\n    /**\n     * @override\n     */\n    get _type(): \"template\" {\n        return \"template\";\n    }\n\n    // eslint-disable-next-line tsdoc/syntax\n    /** @todo Find out if more than one of each component is allowed */\n    /**\n     * Create a Template object for the API\n     *\n     * @param name - Name of the template\n     * @param language - The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     * @param components - Components objects containing the parameters of the message. For text-based templates, the only supported component is BodyComponent.\n     */\n    constructor(\n        name: string,\n        language: string | Language,\n        ...components: (HeaderComponent | BodyComponent | ButtonComponent)[]\n    ) {\n        super();\n        this.name = name;\n        this.language =\n            typeof language === \"string\" ? new Language(language) : language;\n        if (components.length) {\n            const theres_only_body =\n                components.length === 1 &&\n                components[0] instanceof BodyComponent;\n            this.components = components\n                .map((cmpt) => cmpt._build(theres_only_body))\n                .flat();\n        }\n    }\n}\n\n/**\n * Language API object\n *\n * @group Template\n */\nexport class Language {\n    /**\n     * The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     */\n    readonly code: string;\n    /**\n     * The language policy\n     */\n    readonly policy: \"deterministic\";\n\n    /**\n     * Create a Language component for a Template message\n     *\n     * @param code - The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     * @param policy - The language policy the message should follow. The only supported option is 'deterministic'.\n     */\n    constructor(code: string, policy: \"deterministic\" = \"deterministic\") {\n        this.policy = policy;\n        this.code = code;\n    }\n}\n\n/**\n * Currency API object\n *\n * @group Template\n */\nexport class Currency implements ClientTypedMessageComponent {\n    /**\n     * The amount of the currency by 1000\n     */\n    readonly amount_1000: number;\n    /**\n     * The currency code\n     */\n    readonly code: string;\n    /**\n     * The fallback value\n     */\n    readonly fallback_value: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"currency\" {\n        return \"currency\";\n    }\n\n    /**\n     * Builds a currency object for a Parameter\n     *\n     * @param amount_1000 - Amount multiplied by 1000\n     * @param code - Currency code as defined in ISO 4217\n     * @param fallback_value - Default text if localization fails\n     * @throws If amount_1000 is not greater than 0\n     */\n    constructor(amount_1000: number, code: string, fallback_value: string) {\n        if (amount_1000 <= 0)\n            throw new Error(\"Currency must have an amount_1000 greater than 0\");\n\n        this.amount_1000 = amount_1000;\n        this.code = code;\n        this.fallback_value = fallback_value;\n    }\n}\n\n/**\n * DateTime API object\n *\n * @group Template\n */\nexport class DateTime implements ClientTypedMessageComponent {\n    /**\n     * The fallback value\n     */\n    readonly fallback_value: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"date_time\" {\n        return \"date_time\";\n    }\n\n    /**\n     * Builds a date_time object for a Parameter\n     *\n     * @param fallback_value - Default text. For Cloud API, we always use the fallback value, and we do not attempt to localize using other optional fields.\n     */\n    constructor(fallback_value: string) {\n        this.fallback_value = fallback_value;\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class ButtonComponent\n    extends ClientLimitedMessageComponent<string, 3>\n    implements ClientBuildableMessageComponent\n{\n    /**\n     * The type of the component\n     */\n    readonly type: \"button\";\n    /**\n     * The subtype of the component\n     */\n    readonly sub_type: \"url\" | \"quick_reply\";\n    /**\n     * The ButtonParameters to be used in the build function\n     */\n    readonly parameters: ButtonParameter[];\n\n    /**\n     * Builds a button component for a Template message.\n     * The index of the buttons is defined by the order in which you add them to the Template parameters.\n     *\n     * @param sub_type - The type of button to create.\n     * @param parameters - Parameter for each button. The index of each parameter is defined by the order they are sent to the constructor.\n     * @throws If parameters is over 3 elements\n     */\n    constructor(\n        sub_type: \"url\" | \"quick_reply\",\n        ...parameters: AtLeastOne<string>\n    ) {\n        super(\"ButtonComponent\", \"parameters\", parameters, 3);\n\n        const buttonType = sub_type === \"url\" ? \"text\" : \"payload\";\n        const processed = parameters.map(\n            (e) => new ButtonParameter(e, buttonType)\n        );\n\n        this.type = \"button\";\n        this.sub_type = sub_type;\n        this.parameters = processed;\n    }\n\n    /**\n     * @override\n     */\n    _build(): Array<BuiltButtonComponent> {\n        return this.parameters.map((p, i) => {\n            return {\n                type: this.type,\n                sub_type: this.sub_type,\n                index: i.toString(),\n                parameters: [p]\n            };\n        });\n    }\n}\n\n/**\n * Button Parameter API object\n *\n * @group Template\n */\nexport class ButtonParameter {\n    /**\n     * The type of the button\n     */\n    readonly type: \"text\" | \"payload\";\n    /**\n     * The text of the button\n     */\n    readonly text?: string;\n    /**\n     * The payload of the button\n     */\n    readonly payload?: string;\n\n    /**\n     * Builds a button parameter for a ButtonComponent\n     *\n     * @param param - Developer-provided data that is used to fill in the template.\n     * @param type - The type of the button\n     */\n    constructor(param: string, type: \"text\" | \"payload\") {\n        this.type = type;\n        this[type] = param;\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class HeaderComponent implements ClientBuildableMessageComponent {\n    /**\n     * The type of the component\n     */\n    readonly type: \"header\";\n    /**\n     * The parameters of the component\n     */\n    readonly parameters: HeaderParameter[];\n\n    /**\n     * Builds a header component for a Template message\n     *\n     * @param parameters - Parameters of the body component\n     */\n    constructor(...parameters: AtLeastOne<HeaderParameter>) {\n        this.type = \"header\";\n        this.parameters = parameters;\n    }\n\n    /**\n     * @override\n     */\n    _build() {\n        return this;\n    }\n}\n\n/**\n * Parameter API object\n *\n * @group Template\n */\nexport class HeaderParameter {\n    /**\n     * The type of the parameter\n     */\n    readonly type:\n        | \"text\"\n        | \"currency\"\n        | \"date_time\"\n        | \"image\"\n        | \"document\"\n        | \"video\"\n        | \"location\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The currency of the parameter\n     */\n    readonly currency?: Currency;\n    /**\n     * The datetime of the parameter\n     */\n    readonly date_time?: DateTime;\n    /**\n     * The image of the parameter\n     */\n    readonly image?: Image;\n    /**\n     * The document of the parameter\n     */\n    readonly document?: Document;\n    /**\n     * The video of the parameter\n     */\n    readonly video?: Video;\n    /**\n     * The location of the parameter\n     */\n    readonly location?: Location;\n\n    /**\n     * Builds a parameter object for a HeaderComponent.\n     * For text parameter, the character limit is 60.\n     * For Document parameter, only PDF documents are supported for document-based message templates (not checked).\n     * For Location parameter, the location must have a name and address.\n     *\n     * @param parameter - The parameter to be used in the template's header\n     * @throws If parameter is a string and it's over 60 characters\n     * @throws If parameter is a Location and it doesn't have a name and address\n     */\n    constructor(\n        parameter:\n            | string\n            | Currency\n            | DateTime\n            | Image\n            | Document\n            | Video\n            | Location\n    ) {\n        if (typeof parameter === \"string\") {\n            if (parameter.length > 60)\n                throw new Error(\"Header text must be 60 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            if (\n                parameter._type === \"location\" &&\n                !(parameter.name && parameter.address)\n            ) {\n                throw new Error(\"Header location must have a name and address\");\n            }\n\n            this.type = parameter._type;\n        }\n\n        Object.defineProperty(this, this.type, {\n            value: parameter\n        });\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class BodyComponent implements ClientBuildableMessageComponent {\n    /**\n     * The type of the component\n     */\n    readonly type: \"body\";\n    /**\n     * The parameters of the component\n     */\n    readonly parameters: BodyParameter[];\n\n    /**\n     * Builds a body component for a Template message\n     *\n     * @param parameters - Parameters of the body component\n     */\n    constructor(...parameters: AtLeastOne<BodyParameter>) {\n        this.type = \"body\";\n        this.parameters = parameters;\n    }\n\n    /**\n     * @override\n     */\n    _build(theres_only_body: boolean) {\n        // If there are parameters and need to check for the shorter max text length\n        if (this.parameters && !theres_only_body) {\n            for (const param of this.parameters) {\n                if (param.text && param.text?.length > 1024) {\n                    throw new Error(\n                        \"Body text must be 1024 characters or less\"\n                    );\n                }\n            }\n        }\n\n        return this;\n    }\n}\n\n/**\n * Parameter API object\n *\n * @group Template\n */\nexport class BodyParameter {\n    /**\n     * The type of the parameter\n     */\n    readonly type: \"text\" | \"currency\" | \"date_time\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The currency of the parameter\n     */\n    readonly currency?: Currency;\n    /**\n     * The datetime of the parameter\n     */\n    readonly date_time?: DateTime;\n\n    /**\n     * Builds a parameter object for a BodyComponent.\n     * For text parameter, the character limit is 32768 if only one BodyComponent is used for the Template, else it's 1024.\n     *\n     * @param parameter - The parameter to be used in the template\n     * @throws If parameter is a string and it's over 32768 characters\n     * @throws If parameter is a string, there are other components in the Template and it's over 1024 characters\n     * @see BodyComponent._build The method that checks the 1024 character limit\n     */\n    constructor(parameter: string | Currency | DateTime) {\n        if (typeof parameter === \"string\") {\n            // Check the upper limit of the string length here\n            // If a shorter one is needed, check and throw an\n            // error on the build method of BodyComponent\n            if (parameter.length > 32_768)\n                throw new Error(\"Body text must be 32768 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            this.type = parameter._type;\n        }\n\n        Object.defineProperty(this, this.type, {\n            value: parameter\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["ClientMessage", "ClientLimitedMessageComponent", "p", "c", "a", "Template", "ClientMessage", "name", "language", "components", "Language", "theres_only_body", "BodyComponent", "cmpt", "code", "policy", "Currency", "amount_1000", "fallback_value", "DateTime", "ButtonComponent", "ClientLimitedMessageComponent", "sub_type", "parameters", "buttonType", "processed", "e", "ButtonParameter", "p", "i", "param", "type", "HeaderComponent", "HeaderParameter", "parameter", "BodyParameter"]
}
