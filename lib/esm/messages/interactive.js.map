{
  "version": 3,
  "sources": ["../../../src/types.ts", "../../../src/messages/index.ts", "../../../src/messages/interactive.ts"],
  "sourcesContent": ["import type { fetch as FetchType } from \"undici\";\nimport type { subtle as CryptoSubtle } from \"node:crypto\";\n\n/**\n * The main constructor arguments for the API\n */\nexport type TheBasicConstructorArguments = {\n    /**\n     * The API token, given at setup.\n     * You must provide an API token to use the framework.\n     *\n     * It can either be a temporal or permanent one.\n     *\n     * In order to create a permanent token, first make sure you have\n     * linked your WhatsApp account to a Meta Commercial Account in\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps).\n     *\n     * After that, head to [Bussiness Settings](https://business.facebook.com/settings/system-users),\n     * select your app, create a new system user with `admin role`.\n     * Then click \"Add Actives\", select Apps -\\> Your App -\\> App Administrator.\n     *\n     * And this was the point were Meta decided I was too sus because\n     * I created a second bussiness to follow my own tutorial,\n     * and as I didn't want to give them my ID, they banned my account.\n     *\n     * If you read until here, you probably will figure it out.\n     * It's not that hard after getting in the right place.\n     *\n     * Really wish WhatsApp gets away from Meta soon...\n     *\n     * (Sorry for the rant, here's the [actual documentation](https://developers.facebook.com/docs/whatsapp/business-management-api/get-started))\n     */\n    token: string;\n    /**\n     * The app secret, given at setup.\n     *\n     * The secret is used as a signature to validate payload's authenticity.\n     *\n     * To get your app secret, head to\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps),\n     * select your app and open Settings -\\> Basic -\\> App Secret -\\> Show.\n     *\n     * If you want to skip the verification and remove the need to provide the secret,\n     * set `secure` to `false`.\n     */\n    appSecret?: string | never;\n    /**\n     * The webhook verify token, configured at setup.\n     * Used exclusively to verify the server against WhatsApp's servers via the GET method.\n     *\n     * Not required by default, but calling this.get() without it will result in an error.\n     */\n    webhookVerifyToken?: string;\n    /**\n     * The version of the API, defaults to v17.0\n     */\n    v?: string;\n    /**\n     * Whether to return a pre-processed response from the API or the raw fetch response.\n     * Intended for low level debugging.\n     */\n    parsed?: boolean;\n    /**\n     * If set to false, none of the API checks will be performed, and it will be used in a less secure way.\n     *\n     * Defaults to true.\n     */\n    secure?: boolean;\n    /**\n     * The ponyfills to use.\n     *\n     * This are meant to provide standard APIs implementations\n     * on enviroments that don't have them.\n     *\n     * For example, if using Node 16, you will need to ponyfill\n     * the fetch method with any spec complient fetch method.\n     *\n     * @remarks\n     * With the additions of {@link setup} for the most common enviroments,\n     * this parameter should no longer be configured manually.\n     *\n     * @example\n     * ```ts\n     * import { fetch } from \"undici\";\n     * import { subtle } from \"node:crypto\";\n     *\n     * const api = new WhatsAppAPI({\n     *     token: \"my-token\",\n     *     appSecret: \"my-app-secret\",\n     *     ponyfill: {\n     *         fetch,\n     *         subtle\n     *     }\n     * });\n     * ```\n     */\n    ponyfill?: {\n        /**\n         * The fetch ponyfill to use for the requests. If not specified, it defaults to the fetch function from the enviroment.\n         */\n        fetch?: typeof FetchType;\n        /**\n         * The subtle ponyfill to use for the signatures. If not specified, it defaults to crypto.subtle from the enviroment.\n         */\n        subtle?: typeof CryptoSubtle;\n    };\n};\n\n/**\n * This switch allows TypeScript to cry if appSecret is not provided when secure is true.\n */\nexport type SecureLightSwitch =\n    | {\n          secure?: true;\n          appSecret: string;\n      }\n    | {\n          secure: false;\n          appSecret?: never;\n      };\n\n/**\n * Created this type if in the future the constructor needs more complex types.\n */\nexport type ExtraTypesThatMakeTypescriptWork = SecureLightSwitch;\n\n/**\n * Monkey patching TypeDoc inability to handle complex types.\n *\n * You should absolutely read {@link TheBasicConstructorArguments} in order to use the framework.\n */\nexport type WhatsAppAPIConstructorArguments = TheBasicConstructorArguments &\n    ExtraTypesThatMakeTypescriptWork;\n\nexport abstract class ClientMessage {\n    /**\n     * The message type\n     *\n     * @internal\n     */\n    abstract get _type(): ClientMessageNames;\n    /**\n     * The message built as a string. In most cases it's just JSON.stringify(this)\n     *\n     * @internal\n     */\n    _build(): string {\n        return JSON.stringify(this);\n    }\n}\n\nexport interface ClientTypedMessageComponent {\n    /**\n     * The message's component type\n     *\n     * @internal\n     */\n    get _type(): string;\n}\n\nexport abstract class ClientBuildableMessageComponent {\n    /**\n     * The message's component builder method\n     *\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _build(..._: unknown[]): unknown {\n        return this;\n    }\n}\n\nexport abstract class ClientLimitedMessageComponent<T, N extends number> {\n    /**\n     * Throws an error if the array length is greater than the specified number.\n     *\n     * @param p - The parent component name\n     * @param c - The component name\n     * @param a - The array to check the length of\n     * @param n - The maximum length\n     */\n    constructor(p: string, c: string, a: Array<T>, n: N) {\n        if (a.length > n) {\n            throw new Error(`${p} can't have more than ${n} ${c}`);\n        }\n    }\n}\n\n// Somehow, Contacts still manages to be annoying\nexport abstract class ContactComponent\n    implements ClientTypedMessageComponent, ClientBuildableMessageComponent\n{\n    /**\n     * @override\n     */\n    _build(): unknown {\n        return this;\n    }\n\n    /**\n     * Whether the component can be repeated multiple times in a contact.\n     *\n     * @internal\n     */\n    abstract get _many(): boolean;\n    abstract get _type(): string;\n}\n\n/**\n * A contact multiple component can be repeated multiple times in a contact.\n *\n * @internal\n */\nexport abstract class ContactMultipleComponent extends ContactComponent {\n    /**\n     * @override\n     */\n    get _many(): true {\n        return true;\n    }\n\n    abstract get _type(): string;\n}\n\n/**\n * A contact unique component can only be used once in a contact.\n *\n * @internal\n */\nexport abstract class ContactUniqueComponent extends ContactComponent {\n    /**\n     * @override\n     */\n    get _many(): false {\n        return false;\n    }\n\n    abstract get _type(): string;\n}\n\nexport type ClientMessageNames =\n    | \"text\"\n    | \"audio\"\n    | \"document\"\n    | \"image\"\n    | \"sticker\"\n    | \"video\"\n    | \"location\"\n    | \"contacts\"\n    | \"interactive\"\n    | \"template\"\n    | \"reaction\";\n\n// #region Client Message Request\n\nexport type ClientMessageRequest =\n    | {\n          /**\n           * The messaging product\n           */\n          messaging_product: \"whatsapp\";\n          /**\n           * The user's phone number\n           */\n          to: string;\n          /**\n           * Undocumented, optional (the framework doesn't use it)\n           */\n          recipient_type?: \"individual\";\n          /**\n           * The message to reply to\n           */\n          context?: {\n              /**\n               * The message id to reply to\n               */\n              message_id: string;\n          };\n      } & (\n          | {\n                type: \"text\";\n                text?: string;\n            }\n          | {\n                type: \"audio\";\n                audio?: string;\n            }\n          | {\n                type: \"document\";\n                document?: string;\n            }\n          | {\n                type: \"image\";\n                image?: string;\n            }\n          | {\n                type: \"sticker\";\n                sticker?: string;\n            }\n          | {\n                type: \"video\";\n                video?: string;\n            }\n          | {\n                type: \"location\";\n                location?: string;\n            }\n          | {\n                type: \"contacts\";\n                contacts?: string;\n            }\n          | {\n                type: \"interactive\";\n                interactive?: string;\n            }\n          | {\n                type: \"template\";\n                template?: string;\n            }\n          | {\n                type: \"reaction\";\n                reaction?: string;\n            }\n      );\n\n// #endregion\n\nexport type ServerTextMessage = {\n    type: \"text\";\n    text: {\n        body: string;\n    };\n};\n\nexport type ServerAudioMessage = {\n    type: \"audio\";\n    audio: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerDocumentMessage = {\n    type: \"document\";\n    document: {\n        caption?: string;\n        filename: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerImageMessage = {\n    type: \"image\";\n    image: {\n        caption?: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerStickerMessage = {\n    type: \"sticker\";\n    sticker: {\n        id: string;\n        animated: boolean;\n        mime_type: \"image/webp\";\n        sha256: string;\n    };\n};\n\nexport type ServerVideoMessage = {\n    type: \"video\";\n    video: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerLocationMessage = {\n    type: \"location\";\n    location: {\n        latitude: string;\n        longitude: string;\n        name?: string;\n        address?: string;\n    };\n};\n\nexport type ServerContactsMessage = {\n    type: \"contacts\";\n    contacts: [\n        {\n            addresses?: [\n                {\n                    city?: string;\n                    country?: string;\n                    country_code?: string;\n                    state?: string;\n                    street?: string;\n                    type?: string;\n                    zip?: string;\n                }\n            ];\n            birthday?: string;\n            emails?: [\n                {\n                    email?: string;\n                    type?: string;\n                }\n            ];\n            name: {\n                formatted_name: string;\n                first_name?: string;\n                last_name?: string;\n                middle_name?: string;\n                suffix?: string;\n                prefix?: string;\n            };\n            org?: {\n                company?: string;\n                department?: string;\n                title?: string;\n            };\n            phones?: [\n                {\n                    phone?: string;\n                    wa_id?: string;\n                    type?: string;\n                }\n            ];\n            urls?: [\n                {\n                    url?: string;\n                    type?: string;\n                }\n            ];\n        }\n    ];\n};\n\nexport type ServerInteractiveMessage = {\n    type: \"interactive\";\n    interactive:\n        | {\n              type: \"button_reply\";\n              button_reply: {\n                  id: string;\n                  title: string;\n              };\n              list_reply: never;\n          }\n        | {\n              type: \"list_reply\";\n              list_reply: {\n                  id: string;\n                  title: string;\n                  description: string;\n              };\n              button_reply: never;\n          };\n};\n\nexport type ServerButtonMessage = {\n    type: \"button\";\n    button: {\n        text: string;\n        payload: string;\n    };\n};\n\nexport type ServerReactionMessage = {\n    type: \"reaction\";\n    reaction: {\n        emoji: string;\n        messsage_id: string;\n    };\n};\n\nexport type ServerOrderMessage = {\n    type: \"order\";\n    order: {\n        catalog_id: string;\n        product_items: [\n            {\n                product_retailer_id: string;\n                quantity: string;\n                item_price: string;\n                currency: string;\n            }\n        ];\n        text?: string;\n    };\n};\n\nexport type ServerSystemMessage = {\n    type: \"system\";\n    system: {\n        body: string;\n        new_wa_id: number | string; // TODO: check if this is always a number\n        type: string | \"user_changed_number\";\n    };\n};\n\nexport type ServerUnknownMessage = {\n    type: \"unknown\";\n    errors: [\n        {\n            code: number;\n            details: \"Message type is not currently supported\";\n            title: \"Unsupported message type\";\n        }\n    ];\n};\n\nexport type ServerMessageTypes =\n    | ServerTextMessage\n    | ServerAudioMessage\n    | ServerDocumentMessage\n    | ServerImageMessage\n    | ServerStickerMessage\n    | ServerVideoMessage\n    | ServerLocationMessage\n    | ServerContactsMessage\n    | ServerInteractiveMessage\n    | ServerButtonMessage\n    | ServerReactionMessage\n    | ServerOrderMessage\n    | ServerUnknownMessage;\n\nexport type ServerMessage = {\n    from: string;\n    id: string;\n    timestamp: string;\n    context?: {\n        forwarded?: boolean;\n        frequently_forwarded?: boolean;\n        from?: string;\n        id?: string;\n        referred_product?: {\n            catalog_id: string;\n            product_retailer_id: string;\n        };\n    };\n    identity?: {\n        acknowledged: boolean;\n        created_timestamp: number;\n        hash: string;\n    };\n    referral?: {\n        source_url: string;\n        source_id: string;\n        source_type: string;\n        headline: string;\n        body: string;\n        media_type: string;\n        image_url: string;\n        video_url: string;\n        thumbnail_url: string;\n    };\n} & ServerMessageTypes;\n\nexport type ServerContacts = {\n    profile: {\n        name?: string;\n    };\n    wa_id: string;\n};\n\nexport type ServerInitiation =\n    | \"user_initiated\"\n    | \"business_initated\"\n    | \"referral_conversion\";\n\nexport type ServerStatus = \"sent\" | \"delivered\" | \"read\" | \"failed\" | \"deleted\";\n\nexport type ServerPricing = {\n    pricing_model: \"CBP\";\n    billable: boolean;\n    category: ServerInitiation;\n};\n\nexport type ServerConversation = {\n    id: string;\n    expiration_timestamp: number;\n    origin: {\n        type: ServerInitiation;\n    };\n};\n\nexport type ServerError = {\n    code: string;\n    title: string;\n};\n\nexport type GetParams = {\n    \"hub.mode\": \"subscribe\";\n    \"hub.verify_token\": string;\n    \"hub.challenge\": string;\n};\n\nexport type PostData = {\n    object: \"whatsapp_business_account\";\n    entry: {\n        id: string;\n        changes: {\n            value:\n                | {\n                      messaging_product: \"whatsapp\";\n                      metadata: {\n                          display_phone_number: string;\n                          phone_number_id: string;\n                      };\n                  } & (\n                      | {\n                            contacts: [ServerContacts];\n                            messages: [ServerMessage];\n                        }\n                      | {\n                            statuses: [\n                                {\n                                    id: string;\n                                    status: ServerStatus;\n                                    timestamp: string;\n                                    recipient_id: string;\n                                } & (\n                                    | {\n                                          conversation: ServerConversation;\n                                          pricing: ServerPricing;\n                                          errors: undefined;\n                                      }\n                                    | {\n                                          conversation: undefined;\n                                          pricing: undefined;\n                                          errors: [ServerError];\n                                      }\n                                )\n                            ];\n                        }\n                  );\n            field: \"messages\";\n        }[];\n    }[];\n};\n\n/**\n * @see https://developers.facebook.com/docs/whatsapp/cloud-api/support/error-codes\n */\nexport type ServerErrorResponse = {\n    error: {\n        message: string;\n        type: string;\n        code: number;\n        error_data: {\n            messaging_product: \"whatsapp\";\n            details: string;\n        };\n        error_subcode: number;\n        fbtrace_id: string;\n    };\n};\n\nexport type ServerSuccessResponse = {\n    success: true;\n};\n\nexport type ServerSentMessageResponse = {\n    messaging_product: \"whatsapp\";\n    contacts: [\n        {\n            input: string;\n            wa_id: string;\n        }\n    ];\n    messages: [\n        {\n            id: string;\n        }\n    ];\n};\n\nexport type ServerMessageResponse =\n    | ServerSentMessageResponse\n    | ServerErrorResponse;\n\nexport type ServerMarkAsReadResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerQR = {\n    code: string;\n    prefilled_message: string;\n    deep_link_url: string;\n    qr_image_url?: string;\n};\n\nexport type ServerCreateQRResponse = ServerQR | ServerErrorResponse;\n\nexport type ServerRetrieveQRResponse =\n    | {\n          data: ServerQR[];\n      }\n    | ServerErrorResponse;\n\nexport type ServerUpdateQRResponse = ServerQR | ServerErrorResponse;\n\nexport type ServerDeleteQRResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerMedia = {\n    id: string;\n};\n\nexport type ServerMediaUploadResponse = ServerMedia | ServerErrorResponse;\n\nexport type ValidMimeTypes =\n    | \"audio/aac\"\n    | \"audio/mp4\"\n    | \"audio/mpeg\"\n    | \"audio/amr\"\n    | \"audio/ogg\"\n    | \"text/plain\"\n    | \"application/pdf\"\n    | \"application/vnd.ms-powerpoint\"\n    | \"application/msword\"\n    | \"application/vnd.ms-excel\"\n    | \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n    | \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    | \"image/jpeg\"\n    | \"image/png\"\n    | \"video/mp4\"\n    | \"video/3gp\"\n    | \"image/webp\";\n\nexport type ServerMediaRetrieveResponse =\n    | ({\n          messaging_product: \"whatsapp\";\n          url: string;\n          mime_type: ValidMimeTypes;\n          sha256: string;\n          file_size: string;\n      } & ServerMedia)\n    | ServerErrorResponse;\n\nexport type ServerMediaDeleteResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n", "import { ClientLimitedMessageComponent } from \"../types.js\";\nimport { AtLeastOne } from \"../utils.js\";\n\nexport { default as Text } from \"./text.js\";\nexport { default as Location } from \"./location.js\";\nexport { default as Reaction } from \"./reaction.js\";\nexport * from \"./contacts.js\";\nexport * from \"./interactive.js\";\nexport * from \"./media.js\";\nexport * from \"./template.js\";\n\n/**\n * TS knowledge intensifies\n * @internal\n */\nexport function isProductSections(obj: unknown[]): obj is ProductSection[] {\n    return obj[0] instanceof ProductSection;\n}\n\n/**\n * Section API abstract object\n *\n * All sections are structured the same way, so this abstract class is used to reduce code duplication\n *\n * @remarks\n * - All sections must have between 1 and N elements\n * - All sections must have a title if more than 1 section is provided\n *\n * @internal\n * @group Globals\n *\n * @typeParam T - The type of the components of the section\n * @typeParam N - The maximum number of elements in the section\n */\nexport abstract class Section<\n    T,\n    N extends number\n> extends ClientLimitedMessageComponent<T, N> {\n    /**\n     * The title of the section\n     */\n    readonly title?: string;\n\n    /**\n     * Builds a section component\n     *\n     * @param name - The name of the section's type\n     * @param keys_name - The name of the section's keys\n     * @param elements - The elements of the section\n     * @param max - The maximum number of elements in the section\n     * @param title - The title of the section\n     * @param title_length - The maximum length of the title\n     */\n    constructor(\n        name: string,\n        keys_name: string,\n        elements: AtLeastOne<T>,\n        max: N,\n        title?: string,\n        title_length = 24\n    ) {\n        super(name, keys_name, elements, max);\n\n        if (title && title.length > title_length) {\n            throw new Error(\n                `${name} title must be ${title_length} characters or less`\n            );\n        }\n\n        if (elements.length > 1 && !title) {\n            throw new Error(`${name} must have a title`);\n        }\n\n        if (title) this.title = title;\n    }\n}\n\n/**\n * Section API object\n *\n * @group Globals\n */\nexport class ProductSection extends Section<Product, 30> {\n    /**\n     * The products of the section\n     */\n    readonly product_items: Product[];\n\n    /**\n     * Builds a product section component for an {@link ActionProduct}\n     *\n     * @param title - The title of the product section, only required if more than 1 section will be used\n     * @param products - The products to add to the product section\n     * @throws If title is over 24 characters if provided\n     * @throws If more than 30 products are provided\n     */\n    constructor(title: string | undefined, ...products: AtLeastOne<Product>) {\n        super(\"ProductSection\", \"products\", products, 30, title);\n        this.product_items = products;\n    }\n}\n\n/**\n * Product API object\n *\n * @group Globals\n */\nexport class Product {\n    /**\n     * The id of the product\n     */\n    readonly product_retailer_id: string;\n\n    /**\n     * Builds a product component for {@link ActionProduct}, {@link ActionCatalog} and {@link ProductSection}\n     *\n     * @param product_retailer_id - The id of the product\n     */\n    constructor(product_retailer_id: string) {\n        this.product_retailer_id = product_retailer_id;\n    }\n}\n", "import {\n    ClientMessage,\n    ClientLimitedMessageComponent,\n    type ClientTypedMessageComponent\n} from \"../types.js\";\nimport type { AtLeastOne } from \"../utils\";\nimport {\n    Product,\n    ProductSection,\n    Section,\n    isProductSections\n} from \"./index.js\";\n\nimport type { Document, Image, Video } from \"./media\";\n\n/**\n * Interactive API object\n *\n * @group Interactive\n */\nexport class Interactive extends ClientMessage {\n    /**\n     * The action component of the interactive message\n     */\n    readonly action:\n        | ActionList\n        | ActionButtons\n        | ActionProduct\n        | ActionCatalog\n        | ClientTypedMessageComponent;\n    /**\n     * The type of the interactive message\n     */\n    readonly type:\n        | \"list\"\n        | \"button\"\n        | \"catalog_message\"\n        | \"product\"\n        | \"product_list\"\n        | string;\n    /**\n     * The body component of the interactive message\n     */\n    readonly body?: Body;\n    /**\n     * The header component of the interactive message\n     */\n    readonly header?: Header;\n    /**\n     * The footer component of the interactive message\n     */\n    readonly footer?: Footer;\n\n    /**\n     * @override\n     */\n    get _type(): \"interactive\" {\n        return \"interactive\";\n    }\n\n    /**\n     * Create an Interactive object for the API\n     *\n     * @param action - The action component of the interactive message\n     * @param body - The body component of the interactive message\n     * @param header - The header component of the interactive message\n     * @param footer - The footer component of the interactive message\n     * @throws If body is not provided, unless action is an ActionCatalog with a single product\n     * @throws If header is provided for an ActionCatalog with a single product\n     * @throws If header of type text is not provided for an ActionCatalog with a product list\n     * @throws If header is not of type text, unless action is an ActionButtons\n     */\n    constructor(\n        action:\n            | ActionList\n            | ActionButtons\n            | ActionCatalog\n            | ClientTypedMessageComponent,\n        body?: Body,\n        header?: Header,\n        footer?: Footer\n    ) {\n        super();\n\n        if (action._type !== \"product\" && !body)\n            throw new Error(\"Interactive must have a body component\");\n        if (action._type === \"product\" && header)\n            throw new Error(\n                \"Interactive must not have a header component if action is a single product\"\n            );\n        if (action._type === \"product_list\" && header?.type !== \"text\")\n            throw new Error(\n                \"Interactive must have a text header component if action is a product list\"\n            );\n        if (header && action._type !== \"button\" && header?.type !== \"text\")\n            throw new Error(\"Interactive header must be of type text\");\n\n        this.type = action._type;\n\n        this.action = action;\n        if (body) this.body = body;\n        if (header) this.header = header;\n        if (footer) this.footer = footer;\n    }\n}\n\n/**\n * Body API object\n *\n * @group Interactive\n */\nexport class Body {\n    /**\n     * The text of the body\n     */\n    readonly text: string;\n\n    /**\n     * Builds a body component for an Interactive message\n     *\n     * @param text - The text of the message. Maximum length: 1024 characters.\n     * @throws If text is over 1024 characters\n     */\n    constructor(text: string) {\n        if (text.length > 1024)\n            throw new Error(\"Body text must be less than 1024 characters\");\n\n        this.text = text;\n    }\n}\n\n/**\n * Footer API object\n *\n * @group Interactive\n */\nexport class Footer {\n    /**\n     * The text of the footer\n     */\n    readonly text: string;\n\n    /**\n     * Builds a footer component for an Interactive message\n     *\n     * @param text - Text of the footer. Maximum length: 60 characters.\n     * @throws If text is over 60 characters\n     */\n    constructor(text: string) {\n        if (text.length > 60)\n            throw new Error(\"Footer text must be 60 characters or less\");\n\n        this.text = text;\n    }\n}\n\n/**\n * Header API object\n *\n * @group Interactive\n */\nexport class Header {\n    /**\n     * The type of the header\n     */\n    readonly type: \"text\" | \"image\" | \"video\" | \"document\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The image of the parameter\n     */\n    readonly image?: Image;\n    /**\n     * The document of the parameter\n     */\n    readonly document?: Document;\n    /**\n     * The video of the parameter\n     */\n    readonly video?: Video;\n\n    /**\n     * Builds a header component for an Interactive message\n     *\n     * @param object - The message object for the header\n     * @throws If object is a string and is over 60 characters\n     * @throws If object is a Media and has a caption\n     */\n    constructor(object: Document | Image | Video | string) {\n        // All interactive's header can go to hell with its \"exceptions\"\n        if (typeof object === \"string\") {\n            if (object.length > 60)\n                throw new Error(\"Header text must be 60 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            this.type = object._type;\n            if (\"caption\" in object)\n                throw new Error(`Header ${this.type} must not have a caption`);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - TS dumb, the _type will always match the message type\n        this[this.type] = object;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionButtons\n    extends ClientLimitedMessageComponent<Button, 3>\n    implements ClientTypedMessageComponent\n{\n    /**\n     * The buttons of the action\n     */\n    readonly buttons: Button[];\n\n    /**\n     * @override\n     */\n    get _type(): \"button\" {\n        return \"button\";\n    }\n\n    /**\n     * Builds a reply buttons component for an Interactive message\n     *\n     * @param button - Buttons to be used in the reply buttons. Each button title must be unique within the message. Emojis are supported, markdown is not. Must be between 1 and 3 buttons.\n     * @throws If more than 3 buttons are provided\n     * @throws If two or more buttons have the same id\n     * @throws If two or more buttons have the same title\n     */\n    constructor(...button: AtLeastOne<Button>) {\n        super(\"Reply buttons\", \"button\", button, 3);\n\n        // Find if there are duplicates in button.id\n        const ids = button.map((b) => b[b.type].id);\n        if (ids.length !== new Set(ids).size)\n            throw new Error(\"Reply buttons must have unique ids\");\n\n        // Find if there are duplicates in button.title\n        const titles = button.map((b) => b[b.type].title);\n        if (titles.length !== new Set(titles).size)\n            throw new Error(\"Reply buttons must have unique titles\");\n\n        this.buttons = button;\n    }\n}\n\n/**\n * Button API object\n *\n * @group Interactive\n */\nexport class Button {\n    /**\n     * The type of the button\n     */\n    readonly type: \"reply\";\n    /**\n     * The reply object of the row\n     */\n    readonly reply: {\n        /**\n         * The id of the row\n         */\n        id: string;\n        /**\n         * The title of the row\n         */\n        title: string;\n    };\n\n    /**\n     * Builds a button component for ActionButtons\n     *\n     * @param id - Unique identifier for your button. It cannot have leading or trailing spaces. This ID is returned in the webhook when the button is clicked by the user. Maximum length: 256 characters.\n     * @param title - Button title. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.\n     * @throws If id is over 256 characters\n     * @throws If id is malformed\n     * @throws If title is an empty string\n     * @throws If title is over 20 characters\n     */\n    constructor(id: string, title: string) {\n        if (id.length > 256)\n            throw new Error(\"Button id must be 256 characters or less\");\n        if (/^ | $/.test(id))\n            throw new Error(\"Button id cannot have leading or trailing spaces\");\n        if (!title.length)\n            throw new Error(\"Button title cannot be an empty string\");\n        if (title.length > 20)\n            throw new Error(\"Button title must be 20 characters or less\");\n\n        this.type = \"reply\";\n        this.reply = {\n            title,\n            id\n        };\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionList\n    extends ClientLimitedMessageComponent<ListSection, 10>\n    implements ClientTypedMessageComponent\n{\n    /**\n     * The button text\n     */\n    readonly button: string;\n    /**\n     * The sections of the action\n     */\n    readonly sections: ListSection[];\n\n    /**\n     * @override\n     */\n    get _type(): \"list\" {\n        return \"list\";\n    }\n\n    /**\n     * Builds an action component for an Interactive message\n     * Required if interactive type is \"list\"\n     *\n     * @param button - Button content. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.\n     * @param sections - Sections of the list\n     * @throws If button is an empty string\n     * @throws If button is over 20 characters\n     * @throws If more than 10 sections are provided\n     * @throws If more than 1 section is provided and at least one doesn't have a title\n     */\n    constructor(button: string, ...sections: AtLeastOne<ListSection>) {\n        super(\"Action\", \"sections\", sections, 10);\n\n        if (!button.length)\n            throw new Error(\"Button content cannot be an empty string\");\n        if (button.length > 20)\n            throw new Error(\"Button content must be 20 characters or less\");\n        if (sections.length > 1 && !sections.every((obj) => \"title\" in obj))\n            throw new Error(\n                \"All sections must have a title if more than 1 section is provided\"\n            );\n\n        this.button = button;\n        this.sections = sections;\n    }\n}\n\n/**\n * Section API object\n *\n * @group Interactive\n */\nexport class ListSection extends Section<Row, 10> {\n    /**\n     * The rows of the section\n     */\n    readonly rows: Row[];\n\n    /**\n     * Builds a list section component for ActionList\n     *\n     * @param title - Title of the section, only required if there are more than one section\n     * @param rows - Rows of the list section\n     * @throws If title is over 24 characters if provided\n     * @throws If more than 10 rows are provided\n     */\n    constructor(title: string | undefined, ...rows: AtLeastOne<Row>) {\n        super(\"ListSection\", \"rows\", rows, 10, title);\n        this.rows = rows;\n    }\n}\n\n/**\n * Row API object\n *\n * @group Interactive\n */\nexport class Row {\n    /**\n     * The id of the row\n     */\n    readonly id: string;\n    /**\n     * The title of the row\n     */\n    readonly title: string;\n    /**\n     * The description of the row\n     */\n    readonly description?: string;\n\n    /**\n     * Builds a row component for a ListSection\n     *\n     * @param id - The id of the row. Maximum length: 200 characters.\n     * @param title - The title of the row. Maximum length: 24 characters.\n     * @param description - The description of the row. Maximum length: 72 characters.\n     * @throws If id is over 200 characters\n     * @throws If title is over 24 characters\n     * @throws If description is over 72 characters\n     */\n    constructor(id: string, title: string, description?: string) {\n        if (id.length > 200)\n            throw new Error(\"Row id must be 200 characters or less\");\n        if (title.length > 24)\n            throw new Error(\"Row title must be 24 characters or less\");\n        if (description && description.length > 72)\n            throw new Error(\"Row description must be 72 characters or less\");\n\n        this.id = id;\n        this.title = title;\n        if (description) this.description = description;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionCatalog implements ClientTypedMessageComponent {\n    /**\n     * The name of the component\n     */\n    readonly name: \"catalog_message\";\n    /**\n     * The thumbnail product to be shown in the catalog\n     */\n    readonly parameters?: {\n        thumbnail_product_retailer_id?: string;\n    };\n\n    /**\n     * @override\n     */\n    get _type(): \"catalog_message\" {\n        return \"catalog_message\";\n    }\n\n    /**\n     * Builds a catalog component for an Interactive message\n     *\n     * @remarks\n     * Seems like the API throws an error if you try to send a catalog\n     * message without a thumbnail, but the signature will keep the\n     * optional parameter in case WhatsApp decides to make their API\n     * work as expected :)\n     *\n     * @param thumbnail - The thumbnail product to be shown in the catalog. If not provided, the first product will be used (or so says the docs, but it doesn't work).\n     */\n    constructor(thumbnail?: Product) {\n        this.name = \"catalog_message\";\n        if (thumbnail) {\n            this.parameters = {\n                thumbnail_product_retailer_id: thumbnail.product_retailer_id\n            };\n        }\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionProduct implements ClientTypedMessageComponent {\n    /**\n     * The id of the catalog from where to get the products\n     */\n    readonly catalog_id: string;\n    /**\n     * The product to be added to the catalog\n     */\n    readonly product_retailer_id?: string;\n    /**\n     * The section to be added to the catalog\n     */\n    readonly sections?: ProductSection[];\n\n    /**\n     * @override\n     */\n    get _type(): \"product\" | \"product_list\" {\n        return this.product_retailer_id ? \"product\" : \"product_list\";\n    }\n\n    /**\n     * Builds a Multi or Single Product component for an Interactive message\n     *\n     * @param catalog_id - The catalog id\n     * @param products - The products to add to the catalog. It can be a _single_ Product object, or a list of ProductSections.\n     * @throws If products is a product list and more than 10 sections are provided\n     * @throws If products is a product list with more than 1 section and at least one section is missing a title\n     */\n    constructor(\n        catalog_id: string,\n        ...products: [Product] | AtLeastOne<ProductSection>\n    ) {\n        const is_sections = isProductSections(products);\n\n        if (is_sections) {\n            if (products.length > 1) {\n                if (products.length > 10)\n                    throw new Error(\n                        \"Catalog must have between 1 and 10 product sections\"\n                    );\n                for (const obj of products) {\n                    if (!(\"title\" in obj)) {\n                        throw new Error(\n                            \"All sections must have a title if more than 1 section is provided\"\n                        );\n                    }\n                }\n            }\n        }\n\n        this.catalog_id = catalog_id;\n\n        if (is_sections) this.sections = products;\n        else this.product_retailer_id = products[0].product_retailer_id;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
