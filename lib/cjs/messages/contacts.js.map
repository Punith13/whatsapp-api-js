{
  "version": 3,
  "sources": ["../../../src/messages/contacts.ts", "../../../src/types.ts"],
  "sourcesContent": ["import {\n    ClientMessage,\n    type ContactComponent,\n    ContactUniqueComponent,\n    ContactMultipleComponent\n} from \"../types.js\";\nimport type { AtLeastOne } from \"../utils\";\n\n/**\n * @group Contacts\n */\nexport type BuiltContact = {\n    name: Name;\n} & Partial<{\n    birthday: string;\n    org: Organization;\n    addresses: Address[];\n    phones: Phone[];\n    emails: Email[];\n    urls: Url[];\n}>;\n\n/**\n * Contacts API object\n *\n * @group Contacts\n */\nexport class Contacts extends ClientMessage {\n    /**\n     * The contacts of the message\n     */\n    readonly component: BuiltContact[];\n\n    get _type(): \"contacts\" {\n        return \"contacts\";\n    }\n\n    /**\n     * Create a Contacts object for the API\n     *\n     * @param contact - Array of contact's components\n     * @throws If contact contains multiple of the same components and _many is set to false (for example, Name, Birthday and Organization)\n     */\n    constructor(\n        ...contact: AtLeastOne<\n            Array<\n                | Address\n                | Birthday\n                | Email\n                | Name\n                | Organization\n                | Phone\n                | Url\n                | ContactComponent\n            >\n        >\n    ) {\n        super();\n\n        this.component = [];\n\n        for (const components of contact) {\n            const contact = {} as BuiltContact;\n\n            for (const component of components) {\n                const name = component._type as keyof typeof contact;\n\n                if (component._many) {\n                    if (!(name in contact)) {\n                        Object.defineProperty(contact, name, {\n                            value: [] as Address[] | Email[] | Phone[] | Url[]\n                        });\n                    }\n\n                    const pointer = contact[name] as (typeof component)[];\n                    pointer.push(component._build() as ContactComponent);\n                } else {\n                    if (name in contact)\n                        throw new Error(\n                            `Contact already has a ${name} component and _many is set to false`\n                        );\n\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore - TS doesn't know that contact[name] will match the type of the built component\n                    contact[name] =\n                        // reduce ts-ignore impact\n                        component._build() as Exclude<\n                            (typeof contact)[keyof typeof contact],\n                            undefined\n                        >;\n                }\n            }\n\n            if (!contact.name)\n                throw new Error(\"Contact must have a name component\");\n\n            this.component.push(contact);\n        }\n    }\n\n    /**\n     * @override\n     */\n    _build() {\n        return JSON.stringify(this.component);\n    }\n}\n\n/**\n * Address API object\n *\n * @group Contacts\n */\nexport class Address extends ContactMultipleComponent {\n    /**\n     * The country of the address\n     */\n    readonly country?: string;\n    /**\n     * The country code of the address\n     */\n    readonly country_code?: string;\n    /**\n     * The state of the address\n     */\n    readonly state?: string;\n    /**\n     * The city of the address\n     */\n    readonly city?: string;\n    /**\n     * The street of the address\n     */\n    readonly street?: string;\n    /**\n     * The zip code of the address\n     */\n    readonly zip?: string;\n    /**\n     * The type of the address\n     */\n    readonly type?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"addresses\" {\n        return \"addresses\";\n    }\n\n    /**\n     * Builds an address object for a contact.\n     * A contact can contain multiple addresses objects.\n     *\n     * @param country - Full country name\n     * @param country_code - Two-letter country abbreviation\n     * @param state - State abbreviation\n     * @param city - City name\n     * @param street - Street number and name\n     * @param zip - ZIP code\n     * @param type - Address type. Standard Values: HOME, WORK\n     */\n    constructor(\n        country?: string,\n        country_code?: string,\n        state?: string,\n        city?: string,\n        street?: string,\n        zip?: string,\n        type?: string\n    ) {\n        super();\n        if (country) this.country = country;\n        if (country_code) this.country_code = country_code;\n        if (state) this.state = state;\n        if (city) this.city = city;\n        if (street) this.street = street;\n        if (zip) this.zip = zip;\n        if (type) this.type = type;\n    }\n}\n\n/**\n * Birthday API object\n *\n * @group Contacts\n */\nexport class Birthday extends ContactUniqueComponent {\n    /**\n     * The birthday of the contact\n     */\n    readonly birthday: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"birthday\" {\n        return \"birthday\";\n    }\n\n    /**\n     * Builds a birthday object for a contact\n     *\n     * @param year - Year of birth (YYYY)\n     * @param month - Month of birth (MM)\n     * @param day - Day of birth (DD)\n     * @throws If the year, month, or day doesn't have a valid length\n     */\n    constructor(year: string, month: string, day: string) {\n        super();\n        if (year.length !== 4) throw new Error(\"Year must be 4 digits\");\n        if (month.length !== 2) throw new Error(\"Month must be 2 digits\");\n        if (day.length !== 2) throw new Error(\"Day must be 2 digits\");\n        this.birthday = `${year}-${month}-${day}`;\n    }\n\n    /**\n     * @override\n     */\n    _build() {\n        return this.birthday;\n    }\n}\n\n/**\n * Email API object\n *\n * @group Contacts\n */\nexport class Email extends ContactMultipleComponent {\n    /**\n     * The email of the contact\n     */\n    readonly email?: string;\n    /**\n     * The type of the email\n     */\n    readonly type?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"emails\" {\n        return \"emails\";\n    }\n\n    /**\n     * Builds an email object for a contact.\n     * A contact can contain multiple emails objects.\n     *\n     * @param email - Email address\n     * @param type - Email type. Standard Values: HOME, WORK\n     */\n    constructor(email?: string, type?: string) {\n        super();\n        if (email) this.email = email;\n        if (type) this.type = type;\n    }\n}\n\n/**\n * Name API object\n *\n * @group Contacts\n */\nexport class Name extends ContactUniqueComponent {\n    /**\n     * The formatted name of the contact\n     */\n    readonly formatted_name: string;\n    /**\n     * The first name of the contact\n     */\n    readonly first_name?: string;\n    /**\n     * The last name of the contact\n     */\n    readonly last_name?: string;\n    /**\n     * The middle name of the contact\n     */\n    readonly middle_name?: string;\n    /**\n     * The suffix of the contact\n     */\n    readonly suffix?: string;\n    /**\n     * The prefix of the contact\n     */\n    readonly prefix?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"name\" {\n        return \"name\";\n    }\n\n    /**\n     * Builds a name object for a contact, required for contacts.\n     * The object requires a formatted_name and at least another property.\n     *\n     * @param formatted_name - Full name, as it normally appears\n     * @param first_name - First name\n     * @param last_name - Last name\n     * @param middle_name - Middle name\n     * @param suffix - Name suffix\n     * @param prefix - Name prefix\n     * @throws If no other component apart from formatted_name is defined\n     */\n    constructor(\n        formatted_name: string,\n        first_name?: string,\n        last_name?: string,\n        middle_name?: string,\n        suffix?: string,\n        prefix?: string\n    ) {\n        super();\n\n        this.formatted_name = formatted_name;\n        if (first_name) this.first_name = first_name;\n        if (last_name) this.last_name = last_name;\n        if (middle_name) this.middle_name = middle_name;\n        if (suffix) this.suffix = suffix;\n        if (prefix) this.prefix = prefix;\n\n        if (Object.keys(this).length < 2) {\n            throw new Error(\n                \"Name must have at least one of the following: first_name, last_name, middle_name, prefix, suffix\"\n            );\n        }\n    }\n}\n\n/**\n * Organization API object\n *\n * @group Contacts\n */\nexport class Organization extends ContactUniqueComponent {\n    /**\n     * The company of the contact\n     */\n    readonly company?: string;\n    /**\n     * The department of the contact\n     */\n    readonly department?: string;\n    /**\n     * The title of the contact\n     */\n    readonly title?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"org\" {\n        return \"org\";\n    }\n\n    /**\n     * Builds an organization object for a contact\n     *\n     * @param company - Name of the contact's company\n     * @param department - Name of the contact's department\n     * @param title - Contact's business title\n     */\n    constructor(company?: string, department?: string, title?: string) {\n        super();\n        if (company) this.company = company;\n        if (department) this.department = department;\n        if (title) this.title = title;\n    }\n}\n\n/**\n * Phone API object\n *\n * @group Contacts\n */\nexport class Phone extends ContactMultipleComponent {\n    /**\n     * The phone number of the contact\n     */\n    readonly phone?: string;\n    /**\n     * The type of the phone number\n     */\n    readonly type?: string;\n    /**\n     * The WhatsApp ID of the contact\n     */\n    readonly wa_id?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"phones\" {\n        return \"phones\";\n    }\n\n    /**\n     * Builds a phone object for a contact.\n     * A contact can contain multiple phones objects.\n     *\n     * @param phone - Phone number, automatically populated with the wa_id value as a formatted phone number\n     * @param type - Phone type. Standard Values: CELL, MAIN, IPHONE, HOME, WORK\n     * @param wa_id - WhatsApp ID\n     */\n    constructor(phone?: string, type?: string, wa_id?: string) {\n        super();\n        if (phone) this.phone = phone;\n        if (type) this.type = type;\n        if (wa_id) this.wa_id = wa_id;\n    }\n}\n\n/**\n * Url API object\n *\n * @group Contacts\n */\nexport class Url extends ContactMultipleComponent {\n    /**\n     * The URL of the contact\n     */\n    readonly url?: string;\n    /**\n     * The type of the URL\n     */\n    readonly type?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"urls\" {\n        return \"urls\";\n    }\n\n    /**\n     * Builds an url object for a contact.\n     * A contact can contain multiple urls objects.\n     *\n     * @param url - URL\n     * @param type - URL type. Standard Values: HOME, WORK\n     */\n    constructor(url?: string, type?: string) {\n        super();\n        if (url) this.url = url;\n        if (type) this.type = type;\n    }\n}\n", "import type { fetch as FetchType } from \"undici\";\nimport type { subtle as CryptoSubtle } from \"node:crypto\";\n\n/**\n * The main constructor arguments for the API\n */\nexport type TheBasicConstructorArguments = {\n    /**\n     * The API token, given at setup.\n     * You must provide an API token to use the framework.\n     *\n     * It can either be a temporal or permanent one.\n     *\n     * In order to create a permanent token, first make sure you have\n     * linked your WhatsApp account to a Meta Commercial Account in\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps).\n     *\n     * After that, head to [Bussiness Settings](https://business.facebook.com/settings/system-users),\n     * select your app, create a new system user with `admin role`.\n     * Then click \"Add Actives\", select Apps -\\> Your App -\\> App Administrator.\n     *\n     * And this was the point were Meta decided I was too sus because\n     * I created a second bussiness to follow my own tutorial,\n     * and as I didn't want to give them my ID, they banned my account.\n     *\n     * If you read until here, you probably will figure it out.\n     * It's not that hard after getting in the right place.\n     *\n     * Really wish WhatsApp gets away from Meta soon...\n     *\n     * (Sorry for the rant, here's the [actual documentation](https://developers.facebook.com/docs/whatsapp/business-management-api/get-started))\n     */\n    token: string;\n    /**\n     * The app secret, given at setup.\n     *\n     * The secret is used as a signature to validate payload's authenticity.\n     *\n     * To get your app secret, head to\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps),\n     * select your app and open Settings -\\> Basic -\\> App Secret -\\> Show.\n     *\n     * If you want to skip the verification and remove the need to provide the secret,\n     * set `secure` to `false`.\n     */\n    appSecret?: string | never;\n    /**\n     * The webhook verify token, configured at setup.\n     * Used exclusively to verify the server against WhatsApp's servers via the GET method.\n     *\n     * Not required by default, but calling this.get() without it will result in an error.\n     */\n    webhookVerifyToken?: string;\n    /**\n     * The version of the API, defaults to v16.0\n     */\n    v?: string;\n    /**\n     * Whether to return a pre-processed response from the API or the raw fetch response.\n     * Intended for low level debugging.\n     */\n    parsed?: boolean;\n    /**\n     * If set to false, none of the API checks will be performed, and it will be used in a less secure way.\n     *\n     * Defaults to true.\n     */\n    secure?: boolean;\n    /**\n     * The ponyfills to use.\n     *\n     * This are meant to provide standard APIs implementations\n     * on enviroments that don't have them.\n     *\n     * For example, if using Node 16, you will need to ponyfill\n     * the fetch method with any spec complient fetch method.\n     *\n     * @remarks\n     * With the additions of {@link setup} for the most common enviroments,\n     * this parameter should no longer be configured manually.\n     *\n     * @example\n     * ```ts\n     * import { fetch } from \"undici\";\n     * import { subtle } from \"node:crypto\";\n     *\n     * const api = new WhatsAppAPI({\n     *     token: \"my-token\",\n     *     appSecret: \"my-app-secret\",\n     *     ponyfill: {\n     *         fetch,\n     *         subtle\n     *     }\n     * });\n     * ```\n     */\n    ponyfill?: {\n        /**\n         * The fetch ponyfill to use for the requests. If not specified, it defaults to the fetch function from the enviroment.\n         */\n        fetch?: typeof FetchType;\n        /**\n         * The subtle ponyfill to use for the signatures. If not specified, it defaults to crypto.subtle from the enviroment.\n         */\n        subtle?: typeof CryptoSubtle;\n    };\n};\n\n/**\n * This switch allows TypeScript to cry if appSecret is not provided when secure is true.\n */\nexport type SecureLightSwitch =\n    | {\n          secure?: true;\n          appSecret: string;\n      }\n    | {\n          secure: false;\n          appSecret?: never;\n      };\n\n/**\n * Created this type if in the future the constructor needs more complex types.\n */\nexport type ExtraTypesThatMakeTypescriptWork = SecureLightSwitch;\n\n/**\n * Monkey patching TypeDoc inability to handle complex types.\n *\n * You should absolutely read {@link TheBasicConstructorArguments} in order to use the framework.\n */\nexport type WhatsAppAPIConstructorArguments = TheBasicConstructorArguments &\n    ExtraTypesThatMakeTypescriptWork;\n\nexport abstract class ClientMessage {\n    /**\n     * The message type\n     *\n     * @internal\n     */\n    abstract get _type(): ClientMessageNames;\n    /**\n     * The message built as a string. In most cases it's just JSON.stringify(this)\n     *\n     * @internal\n     */\n    _build(): string {\n        return JSON.stringify(this);\n    }\n}\n\nexport interface ClientTypedMessageComponent {\n    /**\n     * The message's component type\n     *\n     * @internal\n     */\n    get _type(): string;\n}\n\nexport abstract class ClientBuildableMessageComponent {\n    /**\n     * The message's component builder method\n     *\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _build(..._: unknown[]): unknown {\n        return this;\n    }\n}\n\nexport abstract class ClientLimitedMessageComponent<T, N extends number> {\n    /**\n     * Throws an error if the array length is greater than the specified number.\n     *\n     * @param p - The parent component name\n     * @param c - The component name\n     * @param a - The array to check the length of\n     * @param n - The maximum length\n     */\n    constructor(p: string, c: string, a: Array<T>, n: N) {\n        if (a.length > n) {\n            throw new Error(`${p} can't have more than ${n} ${c}`);\n        }\n    }\n}\n\n// Somehow, Contacts still manages to be annoying\nexport abstract class ContactComponent\n    implements ClientTypedMessageComponent, ClientBuildableMessageComponent\n{\n    /**\n     * @override\n     */\n    _build(): unknown {\n        return this;\n    }\n\n    /**\n     * Whether the component can be repeated multiple times in a contact.\n     *\n     * @internal\n     */\n    abstract get _many(): boolean;\n    abstract get _type(): string;\n}\n\n/**\n * A contact multiple component can be repeated multiple times in a contact.\n *\n * @internal\n */\nexport abstract class ContactMultipleComponent extends ContactComponent {\n    /**\n     * @override\n     */\n    get _many(): true {\n        return true;\n    }\n\n    abstract get _type(): string;\n}\n\n/**\n * A contact unique component can only be used once in a contact.\n *\n * @internal\n */\nexport abstract class ContactUniqueComponent extends ContactComponent {\n    /**\n     * @override\n     */\n    get _many(): false {\n        return false;\n    }\n\n    abstract get _type(): string;\n}\n\nexport type ClientMessageNames =\n    | \"text\"\n    | \"audio\"\n    | \"document\"\n    | \"image\"\n    | \"sticker\"\n    | \"video\"\n    | \"location\"\n    | \"contacts\"\n    | \"interactive\"\n    | \"template\"\n    | \"reaction\";\n\n// #region Client Message Request\n\nexport type ClientMessageRequest =\n    | {\n          /**\n           * The messaging product\n           */\n          messaging_product: \"whatsapp\";\n          /**\n           * The user's phone number\n           */\n          to: string;\n          /**\n           * Undocumented, optional (the framework doesn't use it)\n           */\n          recipient_type?: \"individual\";\n          /**\n           * The message to reply to\n           */\n          context?: {\n              /**\n               * The message id to reply to\n               */\n              message_id: string;\n          };\n      } & (\n          | {\n                type: \"text\";\n                text?: string;\n            }\n          | {\n                type: \"audio\";\n                audio?: string;\n            }\n          | {\n                type: \"document\";\n                document?: string;\n            }\n          | {\n                type: \"image\";\n                image?: string;\n            }\n          | {\n                type: \"sticker\";\n                sticker?: string;\n            }\n          | {\n                type: \"video\";\n                video?: string;\n            }\n          | {\n                type: \"location\";\n                location?: string;\n            }\n          | {\n                type: \"contacts\";\n                contacts?: string;\n            }\n          | {\n                type: \"interactive\";\n                interactive?: string;\n            }\n          | {\n                type: \"template\";\n                template?: string;\n            }\n          | {\n                type: \"reaction\";\n                reaction?: string;\n            }\n      );\n\n// #endregion\n\nexport type ServerTextMessage = {\n    type: \"text\";\n    text: {\n        body: string;\n    };\n};\n\nexport type ServerAudioMessage = {\n    type: \"audio\";\n    audio: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerDocumentMessage = {\n    type: \"document\";\n    document: {\n        caption?: string;\n        filename: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerImageMessage = {\n    type: \"image\";\n    image: {\n        caption?: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerStickerMessage = {\n    type: \"sticker\";\n    sticker: {\n        id: string;\n        animated: boolean;\n        mime_type: \"image/webp\";\n        sha256: string;\n    };\n};\n\nexport type ServerVideoMessage = {\n    type: \"video\";\n    video: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerLocationMessage = {\n    type: \"location\";\n    location: {\n        latitude: string;\n        longitude: string;\n        name?: string;\n        address?: string;\n    };\n};\n\nexport type ServerContactsMessage = {\n    type: \"contacts\";\n    contacts: [\n        {\n            addresses?: [\n                {\n                    city?: string;\n                    country?: string;\n                    country_code?: string;\n                    state?: string;\n                    street?: string;\n                    type?: string;\n                    zip?: string;\n                }\n            ];\n            birthday?: string;\n            emails?: [\n                {\n                    email?: string;\n                    type?: string;\n                }\n            ];\n            name: {\n                formatted_name: string;\n                first_name?: string;\n                last_name?: string;\n                middle_name?: string;\n                suffix?: string;\n                prefix?: string;\n            };\n            org?: {\n                company?: string;\n                department?: string;\n                title?: string;\n            };\n            phones?: [\n                {\n                    phone?: string;\n                    wa_id?: string;\n                    type?: string;\n                }\n            ];\n            urls?: [\n                {\n                    url?: string;\n                    type?: string;\n                }\n            ];\n        }\n    ];\n};\n\nexport type ServerInteractiveMessage = {\n    type: \"interactive\";\n    interactive:\n        | {\n              type: \"button_reply\";\n              button_reply: {\n                  id: string;\n                  title: string;\n              };\n              list_reply: never;\n          }\n        | {\n              type: \"list_reply\";\n              list_reply: {\n                  id: string;\n                  title: string;\n                  description: string;\n              };\n              button_reply: never;\n          };\n};\n\nexport type ServerButtonMessage = {\n    type: \"button\";\n    button: {\n        text: string;\n        payload: string;\n    };\n};\n\nexport type ServerReactionMessage = {\n    type: \"reaction\";\n    reaction: {\n        emoji: string;\n        messsage_id: string;\n    };\n};\n\nexport type ServerOrderMessage = {\n    type: \"order\";\n    order: {\n        catalog_id: string;\n        product_items: [\n            {\n                product_retailer_id: string;\n                quantity: string;\n                item_price: string;\n                currency: string;\n            }\n        ];\n        text?: string;\n    };\n};\n\nexport type ServerSystemMessage = {\n    type: \"system\";\n    system: {\n        body: string;\n        new_wa_id: number | string; // TODO: check if this is always a number\n        type: string | \"user_changed_number\";\n    };\n};\n\nexport type ServerUnknownMessage = {\n    type: \"unknown\";\n    errors: [\n        {\n            code: number;\n            details: \"Message type is not currently supported\";\n            title: \"Unsupported message type\";\n        }\n    ];\n};\n\nexport type ServerMessageTypes =\n    | ServerTextMessage\n    | ServerAudioMessage\n    | ServerDocumentMessage\n    | ServerImageMessage\n    | ServerStickerMessage\n    | ServerVideoMessage\n    | ServerLocationMessage\n    | ServerContactsMessage\n    | ServerInteractiveMessage\n    | ServerButtonMessage\n    | ServerReactionMessage\n    | ServerOrderMessage\n    | ServerUnknownMessage;\n\nexport type ServerMessage = {\n    from: string;\n    id: string;\n    timestamp: string;\n    context?: {\n        forwarded?: boolean;\n        frequently_forwarded?: boolean;\n        from?: string;\n        id?: string;\n        referred_product?: {\n            catalog_id: string;\n            product_retailer_id: string;\n        };\n    };\n    identity?: {\n        acknowledged: boolean;\n        created_timestamp: number;\n        hash: string;\n    };\n    referral?: {\n        source_url: string;\n        source_id: string;\n        source_type: string;\n        headline: string;\n        body: string;\n        media_type: string;\n        image_url: string;\n        video_url: string;\n        thumbnail_url: string;\n    };\n} & ServerMessageTypes;\n\nexport type ServerContacts = {\n    profile: {\n        name?: string;\n    };\n    wa_id: string;\n};\n\nexport type ServerInitiation =\n    | \"user_initiated\"\n    | \"business_initated\"\n    | \"referral_conversion\";\n\nexport type ServerStatus = \"sent\" | \"delivered\" | \"read\" | \"failed\" | \"deleted\";\n\nexport type ServerPricing = {\n    pricing_model: \"CBP\";\n    billable: boolean;\n    category: ServerInitiation;\n};\n\nexport type ServerConversation = {\n    id: string;\n    expiration_timestamp: number;\n    origin: {\n        type: ServerInitiation;\n    };\n};\n\nexport type ServerError = {\n    code: string;\n    title: string;\n};\n\nexport type GetParams = {\n    \"hub.mode\": \"subscribe\";\n    \"hub.verify_token\": string;\n    \"hub.challenge\": string;\n};\n\nexport type PostData = {\n    object: \"whatsapp_business_account\";\n    entry: {\n        id: string;\n        changes: {\n            value:\n                | {\n                      messaging_product: \"whatsapp\";\n                      metadata: {\n                          display_phone_number: string;\n                          phone_number_id: string;\n                      };\n                  } & (\n                      | {\n                            contacts: [ServerContacts];\n                            messages: [ServerMessage];\n                        }\n                      | {\n                            statuses: [\n                                {\n                                    id: string;\n                                    status: ServerStatus;\n                                    timestamp: string;\n                                    recipient_id: string;\n                                } & (\n                                    | {\n                                          conversation: ServerConversation;\n                                          pricing: ServerPricing;\n                                          errors: undefined;\n                                      }\n                                    | {\n                                          conversation: undefined;\n                                          pricing: undefined;\n                                          errors: [ServerError];\n                                      }\n                                )\n                            ];\n                        }\n                  );\n            field: \"messages\";\n        }[];\n    }[];\n};\n\n/**\n * @see https://developers.facebook.com/docs/whatsapp/cloud-api/support/error-codes\n */\nexport type ServerErrorResponse = {\n    error: {\n        message: string;\n        type: string;\n        code: number;\n        error_data: {\n            messaging_product: \"whatsapp\";\n            details: string;\n        };\n        error_subcode: number;\n        fbtrace_id: string;\n    };\n};\n\nexport type ServerSuccessResponse = {\n    success: true;\n};\n\nexport type ServerSentMessageResponse = {\n    messaging_product: \"whatsapp\";\n    contacts: [\n        {\n            input: string;\n            wa_id: string;\n        }\n    ];\n    messages: [\n        {\n            id: string;\n        }\n    ];\n};\n\nexport type ServerMessageResponse =\n    | ServerSentMessageResponse\n    | ServerErrorResponse;\n\nexport type ServerMarkAsReadResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerQR = {\n    code: string;\n    prefilled_message: string;\n    deep_link_url: string;\n    qr_image_url?: string;\n};\n\nexport type ServerCreateQRResponse = ServerQR | ServerErrorResponse;\n\nexport type ServerRetrieveQRResponse =\n    | {\n          data: ServerQR[];\n      }\n    | ServerErrorResponse;\n\nexport type ServerUpdateQRResponse = ServerQR | ServerErrorResponse;\n\nexport type ServerDeleteQRResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerMedia = {\n    id: string;\n};\n\nexport type ServerMediaUploadResponse = ServerMedia | ServerErrorResponse;\n\nexport type ValidMimeTypes =\n    | \"audio/aac\"\n    | \"audio/mp4\"\n    | \"audio/mpeg\"\n    | \"audio/amr\"\n    | \"audio/ogg\"\n    | \"text/plain\"\n    | \"application/pdf\"\n    | \"application/vnd.ms-powerpoint\"\n    | \"application/msword\"\n    | \"application/vnd.ms-excel\"\n    | \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n    | \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    | \"image/jpeg\"\n    | \"image/png\"\n    | \"video/mp4\"\n    | \"video/3gp\"\n    | \"image/webp\";\n\nexport type ServerMediaRetrieveResponse =\n    | ({\n          messaging_product: \"whatsapp\";\n          url: string;\n          mime_type: ValidMimeTypes;\n          sha256: string;\n          file_size: string;\n      } & ServerMedia)\n    | ServerErrorResponse;\n\nexport type ServerMediaDeleteResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n"],
  "mappings": "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",
  "names": ["contacts_exports", "__export", "Address", "Birthday", "Contacts", "Email", "Name", "Organization", "Phone", "Url", "__toCommonJS", "ClientMessage", "ContactComponent", "ContactMultipleComponent", "ContactUniqueComponent", "Contacts", "ClientMessage", "contact", "components", "component", "name", "Address", "ContactMultipleComponent", "country", "country_code", "state", "city", "street", "zip", "type", "Birthday", "ContactUniqueComponent", "year", "month", "day", "Email", "email", "Name", "formatted_name", "first_name", "last_name", "middle_name", "suffix", "prefix", "Organization", "company", "department", "title", "Phone", "phone", "wa_id", "Url", "url"]
}
