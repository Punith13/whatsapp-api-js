{
  "version": 3,
  "sources": ["../../../src/messages/index.ts", "../../../src/types.ts", "../../../src/messages/text.ts", "../../../src/messages/location.ts", "../../../src/messages/reaction.ts", "../../../src/messages/contacts.ts", "../../../src/messages/interactive.ts", "../../../src/messages/media.ts", "../../../src/messages/template.ts"],
  "sourcesContent": ["import { ClientLimitedMessageComponent } from \"../types.js\";\nimport { AtLeastOne } from \"../utils.js\";\n\nexport { default as Text } from \"./text.js\";\nexport { default as Location } from \"./location.js\";\nexport { default as Reaction } from \"./reaction.js\";\nexport * from \"./contacts.js\";\nexport * from \"./interactive.js\";\nexport * from \"./media.js\";\nexport * from \"./template.js\";\n\n/**\n * TS knowledge intensifies\n * @internal\n */\nexport function isProductSections(obj: unknown[]): obj is ProductSection[] {\n    return obj[0] instanceof ProductSection;\n}\n\n/**\n * Section API abstract object\n *\n * All sections are structured the same way, so this abstract class is used to reduce code duplication\n *\n * @remarks\n * - All sections must have between 1 and N elements\n * - All sections must have a title if more than 1 section is provided\n *\n * @internal\n * @group Globals\n *\n * @typeParam T - The type of the components of the section\n * @typeParam N - The maximum number of elements in the section\n */\nexport abstract class Section<\n    T,\n    N extends number\n> extends ClientLimitedMessageComponent<T, N> {\n    /**\n     * The title of the section\n     */\n    readonly title?: string;\n\n    /**\n     * Builds a section component\n     *\n     * @param name - The name of the section's type\n     * @param keys_name - The name of the section's keys\n     * @param elements - The elements of the section\n     * @param max - The maximum number of elements in the section\n     * @param title - The title of the section\n     * @param title_length - The maximum length of the title\n     */\n    constructor(\n        name: string,\n        keys_name: string,\n        elements: AtLeastOne<T>,\n        max: N,\n        title?: string,\n        title_length = 24\n    ) {\n        super(name, keys_name, elements, max);\n\n        if (title && title.length > title_length) {\n            throw new Error(\n                `${name} title must be ${title_length} characters or less`\n            );\n        }\n\n        if (elements.length > 1 && !title) {\n            throw new Error(`${name} must have a title`);\n        }\n\n        if (title) this.title = title;\n    }\n}\n\n/**\n * Section API object\n *\n * @group Globals\n */\nexport class ProductSection extends Section<Product, 30> {\n    /**\n     * The products of the section\n     */\n    readonly product_items: Product[];\n\n    /**\n     * Builds a product section component for an {@link ActionProduct}\n     *\n     * @param title - The title of the product section, only required if more than 1 section will be used\n     * @param products - The products to add to the product section\n     * @throws If title is over 24 characters if provided\n     * @throws If more than 30 products are provided\n     */\n    constructor(title: string | undefined, ...products: AtLeastOne<Product>) {\n        super(\"ProductSection\", \"products\", products, 30, title);\n        this.product_items = products;\n    }\n}\n\n/**\n * Product API object\n *\n * @group Globals\n */\nexport class Product {\n    /**\n     * The id of the product\n     */\n    readonly product_retailer_id: string;\n\n    /**\n     * Builds a product component for {@link ActionProduct}, {@link ActionCatalog} and {@link ProductSection}\n     *\n     * @param product_retailer_id - The id of the product\n     */\n    constructor(product_retailer_id: string) {\n        this.product_retailer_id = product_retailer_id;\n    }\n}\n", "import type { fetch as FetchType } from \"undici\";\nimport type { subtle as CryptoSubtle } from \"node:crypto\";\n\n/**\n * The main constructor arguments for the API\n */\nexport type TheBasicConstructorArguments = {\n    /**\n     * The API token, given at setup.\n     * You must provide an API token to use the framework.\n     *\n     * It can either be a temporal or permanent one.\n     *\n     * In order to create a permanent token, first make sure you have\n     * linked your WhatsApp account to a Meta Commercial Account in\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps).\n     *\n     * After that, head to [Bussiness Settings](https://business.facebook.com/settings/system-users),\n     * select your app, create a new system user with `admin role`.\n     * Then click \"Add Actives\", select Apps -\\> Your App -\\> App Administrator.\n     *\n     * And this was the point were Meta decided I was too sus because\n     * I created a second bussiness to follow my own tutorial,\n     * and as I didn't want to give them my ID, they banned my account.\n     *\n     * If you read until here, you probably will figure it out.\n     * It's not that hard after getting in the right place.\n     *\n     * Really wish WhatsApp gets away from Meta soon...\n     *\n     * (Sorry for the rant, here's the [actual documentation](https://developers.facebook.com/docs/whatsapp/business-management-api/get-started))\n     */\n    token: string;\n    /**\n     * The app secret, given at setup.\n     *\n     * The secret is used as a signature to validate payload's authenticity.\n     *\n     * To get your app secret, head to\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps),\n     * select your app and open Settings -\\> Basic -\\> App Secret -\\> Show.\n     *\n     * If you want to skip the verification and remove the need to provide the secret,\n     * set `secure` to `false`.\n     */\n    appSecret?: string | never;\n    /**\n     * The webhook verify token, configured at setup.\n     * Used exclusively to verify the server against WhatsApp's servers via the GET method.\n     *\n     * Not required by default, but calling this.get() without it will result in an error.\n     */\n    webhookVerifyToken?: string;\n    /**\n     * The version of the API, defaults to v17.0\n     */\n    v?: string;\n    /**\n     * Whether to return a pre-processed response from the API or the raw fetch response.\n     * Intended for low level debugging.\n     */\n    parsed?: boolean;\n    /**\n     * If set to false, none of the API checks will be performed, and it will be used in a less secure way.\n     *\n     * Defaults to true.\n     */\n    secure?: boolean;\n    /**\n     * The ponyfills to use.\n     *\n     * This are meant to provide standard APIs implementations\n     * on enviroments that don't have them.\n     *\n     * For example, if using Node 16, you will need to ponyfill\n     * the fetch method with any spec complient fetch method.\n     *\n     * @remarks\n     * With the additions of {@link setup} for the most common enviroments,\n     * this parameter should no longer be configured manually.\n     *\n     * @example\n     * ```ts\n     * import { fetch } from \"undici\";\n     * import { subtle } from \"node:crypto\";\n     *\n     * const api = new WhatsAppAPI({\n     *     token: \"my-token\",\n     *     appSecret: \"my-app-secret\",\n     *     ponyfill: {\n     *         fetch,\n     *         subtle\n     *     }\n     * });\n     * ```\n     */\n    ponyfill?: {\n        /**\n         * The fetch ponyfill to use for the requests. If not specified, it defaults to the fetch function from the enviroment.\n         */\n        fetch?: typeof FetchType;\n        /**\n         * The subtle ponyfill to use for the signatures. If not specified, it defaults to crypto.subtle from the enviroment.\n         */\n        subtle?: typeof CryptoSubtle;\n    };\n};\n\n/**\n * This switch allows TypeScript to cry if appSecret is not provided when secure is true.\n */\nexport type SecureLightSwitch =\n    | {\n          secure?: true;\n          appSecret: string;\n      }\n    | {\n          secure: false;\n          appSecret?: never;\n      };\n\n/**\n * Created this type if in the future the constructor needs more complex types.\n */\nexport type ExtraTypesThatMakeTypescriptWork = SecureLightSwitch;\n\n/**\n * Monkey patching TypeDoc inability to handle complex types.\n *\n * You should absolutely read {@link TheBasicConstructorArguments} in order to use the framework.\n */\nexport type WhatsAppAPIConstructorArguments = TheBasicConstructorArguments &\n    ExtraTypesThatMakeTypescriptWork;\n\nexport abstract class ClientMessage {\n    /**\n     * The message type\n     *\n     * @internal\n     */\n    abstract get _type(): ClientMessageNames;\n    /**\n     * The message built as a string. In most cases it's just JSON.stringify(this)\n     *\n     * @internal\n     */\n    _build(): string {\n        return JSON.stringify(this);\n    }\n}\n\nexport interface ClientTypedMessageComponent {\n    /**\n     * The message's component type\n     *\n     * @internal\n     */\n    get _type(): string;\n}\n\nexport abstract class ClientBuildableMessageComponent {\n    /**\n     * The message's component builder method\n     *\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _build(..._: unknown[]): unknown {\n        return this;\n    }\n}\n\nexport abstract class ClientLimitedMessageComponent<T, N extends number> {\n    /**\n     * Throws an error if the array length is greater than the specified number.\n     *\n     * @param p - The parent component name\n     * @param c - The component name\n     * @param a - The array to check the length of\n     * @param n - The maximum length\n     */\n    constructor(p: string, c: string, a: Array<T>, n: N) {\n        if (a.length > n) {\n            throw new Error(`${p} can't have more than ${n} ${c}`);\n        }\n    }\n}\n\n// Somehow, Contacts still manages to be annoying\nexport abstract class ContactComponent\n    implements ClientTypedMessageComponent, ClientBuildableMessageComponent\n{\n    /**\n     * @override\n     */\n    _build(): unknown {\n        return this;\n    }\n\n    /**\n     * Whether the component can be repeated multiple times in a contact.\n     *\n     * @internal\n     */\n    abstract get _many(): boolean;\n    abstract get _type(): string;\n}\n\n/**\n * A contact multiple component can be repeated multiple times in a contact.\n *\n * @internal\n */\nexport abstract class ContactMultipleComponent extends ContactComponent {\n    /**\n     * @override\n     */\n    get _many(): true {\n        return true;\n    }\n\n    abstract get _type(): string;\n}\n\n/**\n * A contact unique component can only be used once in a contact.\n *\n * @internal\n */\nexport abstract class ContactUniqueComponent extends ContactComponent {\n    /**\n     * @override\n     */\n    get _many(): false {\n        return false;\n    }\n\n    abstract get _type(): string;\n}\n\nexport type ClientMessageNames =\n    | \"text\"\n    | \"audio\"\n    | \"document\"\n    | \"image\"\n    | \"sticker\"\n    | \"video\"\n    | \"location\"\n    | \"contacts\"\n    | \"interactive\"\n    | \"template\"\n    | \"reaction\";\n\n// #region Client Message Request\n\nexport type ClientMessageRequest =\n    | {\n          /**\n           * The messaging product\n           */\n          messaging_product: \"whatsapp\";\n          /**\n           * The user's phone number\n           */\n          to: string;\n          /**\n           * Undocumented, optional (the framework doesn't use it)\n           */\n          recipient_type?: \"individual\";\n          /**\n           * The message to reply to\n           */\n          context?: {\n              /**\n               * The message id to reply to\n               */\n              message_id: string;\n          };\n      } & (\n          | {\n                type: \"text\";\n                text?: string;\n            }\n          | {\n                type: \"audio\";\n                audio?: string;\n            }\n          | {\n                type: \"document\";\n                document?: string;\n            }\n          | {\n                type: \"image\";\n                image?: string;\n            }\n          | {\n                type: \"sticker\";\n                sticker?: string;\n            }\n          | {\n                type: \"video\";\n                video?: string;\n            }\n          | {\n                type: \"location\";\n                location?: string;\n            }\n          | {\n                type: \"contacts\";\n                contacts?: string;\n            }\n          | {\n                type: \"interactive\";\n                interactive?: string;\n            }\n          | {\n                type: \"template\";\n                template?: string;\n            }\n          | {\n                type: \"reaction\";\n                reaction?: string;\n            }\n      );\n\n// #endregion\n\nexport type ServerTextMessage = {\n    type: \"text\";\n    text: {\n        body: string;\n    };\n};\n\nexport type ServerAudioMessage = {\n    type: \"audio\";\n    audio: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerDocumentMessage = {\n    type: \"document\";\n    document: {\n        caption?: string;\n        filename: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerImageMessage = {\n    type: \"image\";\n    image: {\n        caption?: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerStickerMessage = {\n    type: \"sticker\";\n    sticker: {\n        id: string;\n        animated: boolean;\n        mime_type: \"image/webp\";\n        sha256: string;\n    };\n};\n\nexport type ServerVideoMessage = {\n    type: \"video\";\n    video: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerLocationMessage = {\n    type: \"location\";\n    location: {\n        latitude: string;\n        longitude: string;\n        name?: string;\n        address?: string;\n    };\n};\n\nexport type ServerContactsMessage = {\n    type: \"contacts\";\n    contacts: [\n        {\n            addresses?: [\n                {\n                    city?: string;\n                    country?: string;\n                    country_code?: string;\n                    state?: string;\n                    street?: string;\n                    type?: string;\n                    zip?: string;\n                }\n            ];\n            birthday?: string;\n            emails?: [\n                {\n                    email?: string;\n                    type?: string;\n                }\n            ];\n            name: {\n                formatted_name: string;\n                first_name?: string;\n                last_name?: string;\n                middle_name?: string;\n                suffix?: string;\n                prefix?: string;\n            };\n            org?: {\n                company?: string;\n                department?: string;\n                title?: string;\n            };\n            phones?: [\n                {\n                    phone?: string;\n                    wa_id?: string;\n                    type?: string;\n                }\n            ];\n            urls?: [\n                {\n                    url?: string;\n                    type?: string;\n                }\n            ];\n        }\n    ];\n};\n\nexport type ServerInteractiveMessage = {\n    type: \"interactive\";\n    interactive:\n        | {\n              type: \"button_reply\";\n              button_reply: {\n                  id: string;\n                  title: string;\n              };\n              list_reply: never;\n          }\n        | {\n              type: \"list_reply\";\n              list_reply: {\n                  id: string;\n                  title: string;\n                  description: string;\n              };\n              button_reply: never;\n          };\n};\n\nexport type ServerButtonMessage = {\n    type: \"button\";\n    button: {\n        text: string;\n        payload: string;\n    };\n};\n\nexport type ServerReactionMessage = {\n    type: \"reaction\";\n    reaction: {\n        emoji: string;\n        messsage_id: string;\n    };\n};\n\nexport type ServerOrderMessage = {\n    type: \"order\";\n    order: {\n        catalog_id: string;\n        product_items: [\n            {\n                product_retailer_id: string;\n                quantity: string;\n                item_price: string;\n                currency: string;\n            }\n        ];\n        text?: string;\n    };\n};\n\nexport type ServerSystemMessage = {\n    type: \"system\";\n    system: {\n        body: string;\n        new_wa_id: number | string; // TODO: check if this is always a number\n        type: string | \"user_changed_number\";\n    };\n};\n\nexport type ServerUnknownMessage = {\n    type: \"unknown\";\n    errors: [\n        {\n            code: number;\n            details: \"Message type is not currently supported\";\n            title: \"Unsupported message type\";\n        }\n    ];\n};\n\nexport type ServerMessageTypes =\n    | ServerTextMessage\n    | ServerAudioMessage\n    | ServerDocumentMessage\n    | ServerImageMessage\n    | ServerStickerMessage\n    | ServerVideoMessage\n    | ServerLocationMessage\n    | ServerContactsMessage\n    | ServerInteractiveMessage\n    | ServerButtonMessage\n    | ServerReactionMessage\n    | ServerOrderMessage\n    | ServerUnknownMessage;\n\nexport type ServerMessage = {\n    from: string;\n    id: string;\n    timestamp: string;\n    context?: {\n        forwarded?: boolean;\n        frequently_forwarded?: boolean;\n        from?: string;\n        id?: string;\n        referred_product?: {\n            catalog_id: string;\n            product_retailer_id: string;\n        };\n    };\n    identity?: {\n        acknowledged: boolean;\n        created_timestamp: number;\n        hash: string;\n    };\n    referral?: {\n        source_url: string;\n        source_id: string;\n        source_type: string;\n        headline: string;\n        body: string;\n        media_type: string;\n        image_url: string;\n        video_url: string;\n        thumbnail_url: string;\n    };\n} & ServerMessageTypes;\n\nexport type ServerContacts = {\n    profile: {\n        name?: string;\n    };\n    wa_id: string;\n};\n\nexport type ServerInitiation =\n    | \"user_initiated\"\n    | \"business_initated\"\n    | \"referral_conversion\";\n\nexport type ServerStatus = \"sent\" | \"delivered\" | \"read\" | \"failed\" | \"deleted\";\n\nexport type ServerPricing = {\n    pricing_model: \"CBP\";\n    billable: boolean;\n    category: ServerInitiation;\n};\n\nexport type ServerConversation = {\n    id: string;\n    expiration_timestamp: number;\n    origin: {\n        type: ServerInitiation;\n    };\n};\n\nexport type ServerError = {\n    code: string;\n    title: string;\n};\n\nexport type GetParams = {\n    \"hub.mode\": \"subscribe\";\n    \"hub.verify_token\": string;\n    \"hub.challenge\": string;\n};\n\nexport type PostData = {\n    object: \"whatsapp_business_account\";\n    entry: {\n        id: string;\n        changes: {\n            value:\n                | {\n                      messaging_product: \"whatsapp\";\n                      metadata: {\n                          display_phone_number: string;\n                          phone_number_id: string;\n                      };\n                  } & (\n                      | {\n                            contacts: [ServerContacts];\n                            messages: [ServerMessage];\n                        }\n                      | {\n                            statuses: [\n                                {\n                                    id: string;\n                                    status: ServerStatus;\n                                    timestamp: string;\n                                    recipient_id: string;\n                                } & (\n                                    | {\n                                          conversation: ServerConversation;\n                                          pricing: ServerPricing;\n                                          errors: undefined;\n                                      }\n                                    | {\n                                          conversation: undefined;\n                                          pricing: undefined;\n                                          errors: [ServerError];\n                                      }\n                                )\n                            ];\n                        }\n                  );\n            field: \"messages\";\n        }[];\n    }[];\n};\n\n/**\n * @see https://developers.facebook.com/docs/whatsapp/cloud-api/support/error-codes\n */\nexport type ServerErrorResponse = {\n    error: {\n        message: string;\n        type: string;\n        code: number;\n        error_data: {\n            messaging_product: \"whatsapp\";\n            details: string;\n        };\n        error_subcode: number;\n        fbtrace_id: string;\n    };\n};\n\nexport type ServerSuccessResponse = {\n    success: true;\n};\n\nexport type ServerSentMessageResponse = {\n    messaging_product: \"whatsapp\";\n    contacts: [\n        {\n            input: string;\n            wa_id: string;\n        }\n    ];\n    messages: [\n        {\n            id: string;\n        }\n    ];\n};\n\nexport type ServerMessageResponse =\n    | ServerSentMessageResponse\n    | ServerErrorResponse;\n\nexport type ServerMarkAsReadResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerQR = {\n    code: string;\n    prefilled_message: string;\n    deep_link_url: string;\n    qr_image_url?: string;\n};\n\nexport type ServerCreateQRResponse = ServerQR | ServerErrorResponse;\n\nexport type ServerRetrieveQRResponse =\n    | {\n          data: ServerQR[];\n      }\n    | ServerErrorResponse;\n\nexport type ServerUpdateQRResponse = ServerQR | ServerErrorResponse;\n\nexport type ServerDeleteQRResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerMedia = {\n    id: string;\n};\n\nexport type ServerMediaUploadResponse = ServerMedia | ServerErrorResponse;\n\nexport type ValidMimeTypes =\n    | \"audio/aac\"\n    | \"audio/mp4\"\n    | \"audio/mpeg\"\n    | \"audio/amr\"\n    | \"audio/ogg\"\n    | \"text/plain\"\n    | \"application/pdf\"\n    | \"application/vnd.ms-powerpoint\"\n    | \"application/msword\"\n    | \"application/vnd.ms-excel\"\n    | \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n    | \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    | \"image/jpeg\"\n    | \"image/png\"\n    | \"video/mp4\"\n    | \"video/3gp\"\n    | \"image/webp\";\n\nexport type ServerMediaRetrieveResponse =\n    | ({\n          messaging_product: \"whatsapp\";\n          url: string;\n          mime_type: ValidMimeTypes;\n          sha256: string;\n          file_size: string;\n      } & ServerMedia)\n    | ServerErrorResponse;\n\nexport type ServerMediaDeleteResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n", "import { ClientMessage } from \"../types.js\";\n\n/**\n * Text API object\n *\n * @group Text\n */\nexport default class Text extends ClientMessage {\n    /**\n     * Body of the message. Maximum length: 4096 characters.\n     */\n    readonly body: string;\n    /**\n     * Whether to enable preview for the text message\n     */\n    readonly preview_url?: boolean;\n\n    get _type(): \"text\" {\n        return \"text\";\n    }\n\n    /**\n     * Create a Text object for the API\n     *\n     * @param body - The content of the text message which can contain formatting and URLs which begin with http:// or https://\n     * @param preview_url - By default, WhatsApp recognizes URLs and makes them clickable, but you can also include a preview box with more information about the link. Set this field to true if you want to include a URL preview box.\n     * @throws If body is over 4096 characters\n     */\n    constructor(body: string, preview_url?: boolean) {\n        super();\n        if (body.length > 4096)\n            throw new Error(\"Text body must be less than 4096 characters\");\n        this.body = body;\n        if (preview_url) this.preview_url = preview_url;\n    }\n}\n", "import { ClientMessage } from \"../types.js\";\n\n/**\n * Location API component\n *\n * @group Location\n */\nexport default class Location extends ClientMessage {\n    /**\n     * The latitude of the location\n     */\n    readonly longitude: number;\n    /**\n     * The longitude of the location\n     */\n    readonly latitude: number;\n    /**\n     * The name of the location\n     */\n    readonly name?: string;\n    /**\n     * The address of the location\n     */\n    readonly address?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"location\" {\n        return \"location\";\n    }\n\n    /**\n     * Create a Location object for the API\n     *\n     * @param longitude - Longitude of the location\n     * @param latitude - Latitude of the location\n     * @param name - Name of the location\n     * @param address - Address of the location, only displayed if name is present\n     */\n    constructor(\n        longitude: number,\n        latitude: number,\n        name?: string,\n        address?: string\n    ) {\n        super();\n        this.longitude = longitude;\n        this.latitude = latitude;\n        if (name) this.name = name;\n        if (address) this.address = address;\n    }\n}\n", "import { ClientMessage } from \"../types.js\";\n\n/**\n * Reaction API object\n *\n * @group Reaction\n */\nexport default class Reaction extends ClientMessage {\n    /**\n     * The message's id to react to\n     */\n    readonly message_id: string;\n    /**\n     * The reaction emoji\n     */\n    readonly emoji: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"reaction\" {\n        return \"reaction\";\n    }\n\n    /**\n     * Create a Reaction object for the API\n     *\n     * @param message_id - The message's id (wamid) to react to\n     * @param emoji - The emoji to react with, defaults to empty string to remove a reaction\n     * @throws If a non-emoji or more than one emoji is provided\n     */\n    constructor(message_id: string, emoji = \"\") {\n        super();\n\n        if (emoji && !/^\\p{Extended_Pictographic}$/u.test(emoji))\n            throw new Error(\"Reaction emoji must be a single emoji\");\n\n        this.message_id = message_id;\n        this.emoji = emoji;\n    }\n}\n", "import {\n    ClientMessage,\n    type ContactComponent,\n    ContactUniqueComponent,\n    ContactMultipleComponent\n} from \"../types.js\";\nimport type { AtLeastOne } from \"../utils\";\n\n/**\n * @group Contacts\n */\nexport type BuiltContact = {\n    name: Name;\n} & Partial<{\n    birthday: string;\n    org: Organization;\n    addresses: Address[];\n    phones: Phone[];\n    emails: Email[];\n    urls: Url[];\n}>;\n\n/**\n * Contacts API object\n *\n * @group Contacts\n */\nexport class Contacts extends ClientMessage {\n    /**\n     * The contacts of the message\n     */\n    readonly component: BuiltContact[];\n\n    get _type(): \"contacts\" {\n        return \"contacts\";\n    }\n\n    /**\n     * Create a Contacts object for the API\n     *\n     * @param contact - Array of contact's components\n     * @throws If contact contains multiple of the same components and _many is set to false (for example, Name, Birthday and Organization)\n     */\n    constructor(\n        ...contact: AtLeastOne<\n            Array<\n                | Address\n                | Birthday\n                | Email\n                | Name\n                | Organization\n                | Phone\n                | Url\n                | ContactComponent\n            >\n        >\n    ) {\n        super();\n\n        this.component = [];\n\n        for (const components of contact) {\n            const contact = {} as BuiltContact;\n\n            for (const component of components) {\n                const name = component._type as keyof typeof contact;\n\n                if (component._many) {\n                    if (!(name in contact)) {\n                        Object.defineProperty(contact, name, {\n                            value: [] as Address[] | Email[] | Phone[] | Url[],\n                            enumerable: true\n                        });\n                    }\n\n                    const pointer = contact[name] as (typeof component)[];\n                    pointer.push(component._build() as ContactComponent);\n                } else {\n                    if (name in contact)\n                        throw new Error(\n                            `Contact already has a ${name} component and _many is set to false`\n                        );\n\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore - TS doesn't know that contact[name] will match the type of the built component\n                    contact[name] =\n                        // reduce ts-ignore impact\n                        component._build() as Exclude<\n                            (typeof contact)[keyof typeof contact],\n                            undefined\n                        >;\n                }\n            }\n\n            if (!contact.name)\n                throw new Error(\"Contact must have a name component\");\n\n            this.component.push(contact);\n        }\n    }\n\n    /**\n     * @override\n     */\n    _build() {\n        return JSON.stringify(this.component);\n    }\n}\n\n/**\n * Address API object\n *\n * @group Contacts\n */\nexport class Address extends ContactMultipleComponent {\n    /**\n     * The country of the address\n     */\n    readonly country?: string;\n    /**\n     * The country code of the address\n     */\n    readonly country_code?: string;\n    /**\n     * The state of the address\n     */\n    readonly state?: string;\n    /**\n     * The city of the address\n     */\n    readonly city?: string;\n    /**\n     * The street of the address\n     */\n    readonly street?: string;\n    /**\n     * The zip code of the address\n     */\n    readonly zip?: string;\n    /**\n     * The type of the address\n     */\n    readonly type?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"addresses\" {\n        return \"addresses\";\n    }\n\n    /**\n     * Builds an address object for a contact.\n     * A contact can contain multiple addresses objects.\n     *\n     * @param country - Full country name\n     * @param country_code - Two-letter country abbreviation\n     * @param state - State abbreviation\n     * @param city - City name\n     * @param street - Street number and name\n     * @param zip - ZIP code\n     * @param type - Address type. Standard Values: HOME, WORK\n     */\n    constructor(\n        country?: string,\n        country_code?: string,\n        state?: string,\n        city?: string,\n        street?: string,\n        zip?: string,\n        type?: string\n    ) {\n        super();\n        if (country) this.country = country;\n        if (country_code) this.country_code = country_code;\n        if (state) this.state = state;\n        if (city) this.city = city;\n        if (street) this.street = street;\n        if (zip) this.zip = zip;\n        if (type) this.type = type;\n    }\n}\n\n/**\n * Birthday API object\n *\n * @group Contacts\n */\nexport class Birthday extends ContactUniqueComponent {\n    /**\n     * The birthday of the contact\n     */\n    readonly birthday: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"birthday\" {\n        return \"birthday\";\n    }\n\n    /**\n     * Builds a birthday object for a contact\n     *\n     * @param year - Year of birth (YYYY)\n     * @param month - Month of birth (MM)\n     * @param day - Day of birth (DD)\n     * @throws If the year, month, or day doesn't have a valid length\n     */\n    constructor(year: string, month: string, day: string) {\n        super();\n        if (year.length !== 4) throw new Error(\"Year must be 4 digits\");\n        if (month.length !== 2) throw new Error(\"Month must be 2 digits\");\n        if (day.length !== 2) throw new Error(\"Day must be 2 digits\");\n        this.birthday = `${year}-${month}-${day}`;\n    }\n\n    /**\n     * @override\n     */\n    _build() {\n        return this.birthday;\n    }\n}\n\n/**\n * Email API object\n *\n * @group Contacts\n */\nexport class Email extends ContactMultipleComponent {\n    /**\n     * The email of the contact\n     */\n    readonly email?: string;\n    /**\n     * The type of the email\n     */\n    readonly type?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"emails\" {\n        return \"emails\";\n    }\n\n    /**\n     * Builds an email object for a contact.\n     * A contact can contain multiple emails objects.\n     *\n     * @param email - Email address\n     * @param type - Email type. Standard Values: HOME, WORK\n     */\n    constructor(email?: string, type?: string) {\n        super();\n        if (email) this.email = email;\n        if (type) this.type = type;\n    }\n}\n\n/**\n * Name API object\n *\n * @group Contacts\n */\nexport class Name extends ContactUniqueComponent {\n    /**\n     * The formatted name of the contact\n     */\n    readonly formatted_name: string;\n    /**\n     * The first name of the contact\n     */\n    readonly first_name?: string;\n    /**\n     * The last name of the contact\n     */\n    readonly last_name?: string;\n    /**\n     * The middle name of the contact\n     */\n    readonly middle_name?: string;\n    /**\n     * The suffix of the contact\n     */\n    readonly suffix?: string;\n    /**\n     * The prefix of the contact\n     */\n    readonly prefix?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"name\" {\n        return \"name\";\n    }\n\n    /**\n     * Builds a name object for a contact, required for contacts.\n     * The object requires a formatted_name and at least another property.\n     *\n     * @param formatted_name - Full name, as it normally appears\n     * @param first_name - First name\n     * @param last_name - Last name\n     * @param middle_name - Middle name\n     * @param suffix - Name suffix\n     * @param prefix - Name prefix\n     * @throws If no other component apart from formatted_name is defined\n     */\n    constructor(\n        formatted_name: string,\n        first_name?: string,\n        last_name?: string,\n        middle_name?: string,\n        suffix?: string,\n        prefix?: string\n    ) {\n        super();\n\n        this.formatted_name = formatted_name;\n        if (first_name) this.first_name = first_name;\n        if (last_name) this.last_name = last_name;\n        if (middle_name) this.middle_name = middle_name;\n        if (suffix) this.suffix = suffix;\n        if (prefix) this.prefix = prefix;\n\n        if (Object.keys(this).length < 2) {\n            throw new Error(\n                \"Name must have at least one of the following: first_name, last_name, middle_name, prefix, suffix\"\n            );\n        }\n    }\n}\n\n/**\n * Organization API object\n *\n * @group Contacts\n */\nexport class Organization extends ContactUniqueComponent {\n    /**\n     * The company of the contact\n     */\n    readonly company?: string;\n    /**\n     * The department of the contact\n     */\n    readonly department?: string;\n    /**\n     * The title of the contact\n     */\n    readonly title?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"org\" {\n        return \"org\";\n    }\n\n    /**\n     * Builds an organization object for a contact\n     *\n     * @param company - Name of the contact's company\n     * @param department - Name of the contact's department\n     * @param title - Contact's business title\n     */\n    constructor(company?: string, department?: string, title?: string) {\n        super();\n        if (company) this.company = company;\n        if (department) this.department = department;\n        if (title) this.title = title;\n    }\n}\n\n/**\n * Phone API object\n *\n * @group Contacts\n */\nexport class Phone extends ContactMultipleComponent {\n    /**\n     * The phone number of the contact\n     */\n    readonly phone?: string;\n    /**\n     * The type of the phone number\n     */\n    readonly type?: string;\n    /**\n     * The WhatsApp ID of the contact\n     */\n    readonly wa_id?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"phones\" {\n        return \"phones\";\n    }\n\n    /**\n     * Builds a phone object for a contact.\n     * A contact can contain multiple phones objects.\n     *\n     * @param phone - Phone number, automatically populated with the wa_id value as a formatted phone number\n     * @param type - Phone type. Standard Values: CELL, MAIN, IPHONE, HOME, WORK\n     * @param wa_id - WhatsApp ID\n     */\n    constructor(phone?: string, type?: string, wa_id?: string) {\n        super();\n        if (phone) this.phone = phone;\n        if (type) this.type = type;\n        if (wa_id) this.wa_id = wa_id;\n    }\n}\n\n/**\n * Url API object\n *\n * @group Contacts\n */\nexport class Url extends ContactMultipleComponent {\n    /**\n     * The URL of the contact\n     */\n    readonly url?: string;\n    /**\n     * The type of the URL\n     */\n    readonly type?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"urls\" {\n        return \"urls\";\n    }\n\n    /**\n     * Builds an url object for a contact.\n     * A contact can contain multiple urls objects.\n     *\n     * @param url - URL\n     * @param type - URL type. Standard Values: HOME, WORK\n     */\n    constructor(url?: string, type?: string) {\n        super();\n        if (url) this.url = url;\n        if (type) this.type = type;\n    }\n}\n", "import {\n    ClientMessage,\n    ClientLimitedMessageComponent,\n    type ClientTypedMessageComponent\n} from \"../types.js\";\nimport type { AtLeastOne } from \"../utils\";\nimport {\n    Product,\n    ProductSection,\n    Section,\n    isProductSections\n} from \"./index.js\";\n\nimport type { Document, Image, Video } from \"./media\";\n\n/**\n * Interactive API object\n *\n * @group Interactive\n */\nexport class Interactive extends ClientMessage {\n    /**\n     * The action component of the interactive message\n     */\n    readonly action:\n        | ActionList\n        | ActionButtons\n        | ActionProduct\n        | ActionCatalog\n        | ClientTypedMessageComponent;\n    /**\n     * The type of the interactive message\n     */\n    readonly type:\n        | \"list\"\n        | \"button\"\n        | \"catalog_message\"\n        | \"product\"\n        | \"product_list\"\n        | string;\n    /**\n     * The body component of the interactive message\n     */\n    readonly body?: Body;\n    /**\n     * The header component of the interactive message\n     */\n    readonly header?: Header;\n    /**\n     * The footer component of the interactive message\n     */\n    readonly footer?: Footer;\n\n    /**\n     * @override\n     */\n    get _type(): \"interactive\" {\n        return \"interactive\";\n    }\n\n    /**\n     * Create an Interactive object for the API\n     *\n     * @param action - The action component of the interactive message\n     * @param body - The body component of the interactive message\n     * @param header - The header component of the interactive message\n     * @param footer - The footer component of the interactive message\n     * @throws If body is not provided, unless action is an ActionCatalog with a single product\n     * @throws If header is provided for an ActionCatalog with a single product\n     * @throws If header of type text is not provided for an ActionCatalog with a product list\n     * @throws If header is not of type text, unless action is an ActionButtons\n     */\n    constructor(\n        action:\n            | ActionList\n            | ActionButtons\n            | ActionCatalog\n            | ClientTypedMessageComponent,\n        body?: Body,\n        header?: Header,\n        footer?: Footer\n    ) {\n        super();\n\n        if (action._type !== \"product\" && !body)\n            throw new Error(\"Interactive must have a body component\");\n        if (action._type === \"product\" && header)\n            throw new Error(\n                \"Interactive must not have a header component if action is a single product\"\n            );\n        if (action._type === \"product_list\" && header?.type !== \"text\")\n            throw new Error(\n                \"Interactive must have a text header component if action is a product list\"\n            );\n        if (header && action._type !== \"button\" && header?.type !== \"text\")\n            throw new Error(\"Interactive header must be of type text\");\n\n        this.type = action._type;\n\n        this.action = action;\n        if (body) this.body = body;\n        if (header) this.header = header;\n        if (footer) this.footer = footer;\n    }\n}\n\n/**\n * Body API object\n *\n * @group Interactive\n */\nexport class Body {\n    /**\n     * The text of the body\n     */\n    readonly text: string;\n\n    /**\n     * Builds a body component for an Interactive message\n     *\n     * @param text - The text of the message. Maximum length: 1024 characters.\n     * @throws If text is over 1024 characters\n     */\n    constructor(text: string) {\n        if (text.length > 1024)\n            throw new Error(\"Body text must be less than 1024 characters\");\n\n        this.text = text;\n    }\n}\n\n/**\n * Footer API object\n *\n * @group Interactive\n */\nexport class Footer {\n    /**\n     * The text of the footer\n     */\n    readonly text: string;\n\n    /**\n     * Builds a footer component for an Interactive message\n     *\n     * @param text - Text of the footer. Maximum length: 60 characters.\n     * @throws If text is over 60 characters\n     */\n    constructor(text: string) {\n        if (text.length > 60)\n            throw new Error(\"Footer text must be 60 characters or less\");\n\n        this.text = text;\n    }\n}\n\n/**\n * Header API object\n *\n * @group Interactive\n */\nexport class Header {\n    /**\n     * The type of the header\n     */\n    readonly type: \"text\" | \"image\" | \"video\" | \"document\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The image of the parameter\n     */\n    readonly image?: Image;\n    /**\n     * The document of the parameter\n     */\n    readonly document?: Document;\n    /**\n     * The video of the parameter\n     */\n    readonly video?: Video;\n\n    /**\n     * Builds a header component for an Interactive message\n     *\n     * @param object - The message object for the header\n     * @throws If object is a string and is over 60 characters\n     * @throws If object is a Media and has a caption\n     */\n    constructor(object: Document | Image | Video | string) {\n        // All interactive's header can go to hell with its \"exceptions\"\n        if (typeof object === \"string\") {\n            if (object.length > 60)\n                throw new Error(\"Header text must be 60 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            this.type = object._type;\n            if (\"caption\" in object)\n                throw new Error(`Header ${this.type} must not have a caption`);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - TS dumb, the _type will always match the message type\n        this[this.type] = object;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionButtons\n    extends ClientLimitedMessageComponent<Button, 3>\n    implements ClientTypedMessageComponent\n{\n    /**\n     * The buttons of the action\n     */\n    readonly buttons: Button[];\n\n    /**\n     * @override\n     */\n    get _type(): \"button\" {\n        return \"button\";\n    }\n\n    /**\n     * Builds a reply buttons component for an Interactive message\n     *\n     * @param button - Buttons to be used in the reply buttons. Each button title must be unique within the message. Emojis are supported, markdown is not. Must be between 1 and 3 buttons.\n     * @throws If more than 3 buttons are provided\n     * @throws If two or more buttons have the same id\n     * @throws If two or more buttons have the same title\n     */\n    constructor(...button: AtLeastOne<Button>) {\n        super(\"Reply buttons\", \"button\", button, 3);\n\n        // Find if there are duplicates in button.id\n        const ids = button.map((b) => b[b.type].id);\n        if (ids.length !== new Set(ids).size)\n            throw new Error(\"Reply buttons must have unique ids\");\n\n        // Find if there are duplicates in button.title\n        const titles = button.map((b) => b[b.type].title);\n        if (titles.length !== new Set(titles).size)\n            throw new Error(\"Reply buttons must have unique titles\");\n\n        this.buttons = button;\n    }\n}\n\n/**\n * Button API object\n *\n * @group Interactive\n */\nexport class Button {\n    /**\n     * The type of the button\n     */\n    readonly type: \"reply\";\n    /**\n     * The reply object of the row\n     */\n    readonly reply: {\n        /**\n         * The id of the row\n         */\n        id: string;\n        /**\n         * The title of the row\n         */\n        title: string;\n    };\n\n    /**\n     * Builds a button component for ActionButtons\n     *\n     * @param id - Unique identifier for your button. It cannot have leading or trailing spaces. This ID is returned in the webhook when the button is clicked by the user. Maximum length: 256 characters.\n     * @param title - Button title. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.\n     * @throws If id is over 256 characters\n     * @throws If id is malformed\n     * @throws If title is an empty string\n     * @throws If title is over 20 characters\n     */\n    constructor(id: string, title: string) {\n        if (id.length > 256)\n            throw new Error(\"Button id must be 256 characters or less\");\n        if (/^ | $/.test(id))\n            throw new Error(\"Button id cannot have leading or trailing spaces\");\n        if (!title.length)\n            throw new Error(\"Button title cannot be an empty string\");\n        if (title.length > 20)\n            throw new Error(\"Button title must be 20 characters or less\");\n\n        this.type = \"reply\";\n        this.reply = {\n            title,\n            id\n        };\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionList\n    extends ClientLimitedMessageComponent<ListSection, 10>\n    implements ClientTypedMessageComponent\n{\n    /**\n     * The button text\n     */\n    readonly button: string;\n    /**\n     * The sections of the action\n     */\n    readonly sections: ListSection[];\n\n    /**\n     * @override\n     */\n    get _type(): \"list\" {\n        return \"list\";\n    }\n\n    /**\n     * Builds an action component for an Interactive message\n     * Required if interactive type is \"list\"\n     *\n     * @param button - Button content. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.\n     * @param sections - Sections of the list\n     * @throws If button is an empty string\n     * @throws If button is over 20 characters\n     * @throws If more than 10 sections are provided\n     * @throws If more than 1 section is provided and at least one doesn't have a title\n     */\n    constructor(button: string, ...sections: AtLeastOne<ListSection>) {\n        super(\"Action\", \"sections\", sections, 10);\n\n        if (!button.length)\n            throw new Error(\"Button content cannot be an empty string\");\n        if (button.length > 20)\n            throw new Error(\"Button content must be 20 characters or less\");\n        if (sections.length > 1 && !sections.every((obj) => \"title\" in obj))\n            throw new Error(\n                \"All sections must have a title if more than 1 section is provided\"\n            );\n\n        this.button = button;\n        this.sections = sections;\n    }\n}\n\n/**\n * Section API object\n *\n * @group Interactive\n */\nexport class ListSection extends Section<Row, 10> {\n    /**\n     * The rows of the section\n     */\n    readonly rows: Row[];\n\n    /**\n     * Builds a list section component for ActionList\n     *\n     * @param title - Title of the section, only required if there are more than one section\n     * @param rows - Rows of the list section\n     * @throws If title is over 24 characters if provided\n     * @throws If more than 10 rows are provided\n     */\n    constructor(title: string | undefined, ...rows: AtLeastOne<Row>) {\n        super(\"ListSection\", \"rows\", rows, 10, title);\n        this.rows = rows;\n    }\n}\n\n/**\n * Row API object\n *\n * @group Interactive\n */\nexport class Row {\n    /**\n     * The id of the row\n     */\n    readonly id: string;\n    /**\n     * The title of the row\n     */\n    readonly title: string;\n    /**\n     * The description of the row\n     */\n    readonly description?: string;\n\n    /**\n     * Builds a row component for a ListSection\n     *\n     * @param id - The id of the row. Maximum length: 200 characters.\n     * @param title - The title of the row. Maximum length: 24 characters.\n     * @param description - The description of the row. Maximum length: 72 characters.\n     * @throws If id is over 200 characters\n     * @throws If title is over 24 characters\n     * @throws If description is over 72 characters\n     */\n    constructor(id: string, title: string, description?: string) {\n        if (id.length > 200)\n            throw new Error(\"Row id must be 200 characters or less\");\n        if (title.length > 24)\n            throw new Error(\"Row title must be 24 characters or less\");\n        if (description && description.length > 72)\n            throw new Error(\"Row description must be 72 characters or less\");\n\n        this.id = id;\n        this.title = title;\n        if (description) this.description = description;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionCatalog implements ClientTypedMessageComponent {\n    /**\n     * The name of the component\n     */\n    readonly name: \"catalog_message\";\n    /**\n     * The thumbnail product to be shown in the catalog\n     */\n    readonly parameters?: {\n        thumbnail_product_retailer_id?: string;\n    };\n\n    /**\n     * @override\n     */\n    get _type(): \"catalog_message\" {\n        return \"catalog_message\";\n    }\n\n    /**\n     * Builds a catalog component for an Interactive message\n     *\n     * @remarks\n     * Seems like the API throws an error if you try to send a catalog\n     * message without a thumbnail, but the signature will keep the\n     * optional parameter in case WhatsApp decides to make their API\n     * work as expected :)\n     *\n     * @param thumbnail - The thumbnail product to be shown in the catalog. If not provided, the first product will be used (or so says the docs, but it doesn't work).\n     */\n    constructor(thumbnail?: Product) {\n        this.name = \"catalog_message\";\n        if (thumbnail) {\n            this.parameters = {\n                thumbnail_product_retailer_id: thumbnail.product_retailer_id\n            };\n        }\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionProduct implements ClientTypedMessageComponent {\n    /**\n     * The id of the catalog from where to get the products\n     */\n    readonly catalog_id: string;\n    /**\n     * The product to be added to the catalog\n     */\n    readonly product_retailer_id?: string;\n    /**\n     * The section to be added to the catalog\n     */\n    readonly sections?: ProductSection[];\n\n    /**\n     * @override\n     */\n    get _type(): \"product\" | \"product_list\" {\n        return this.product_retailer_id ? \"product\" : \"product_list\";\n    }\n\n    /**\n     * Builds a Multi or Single Product component for an Interactive message\n     *\n     * @param catalog_id - The catalog id\n     * @param products - The products to add to the catalog. It can be a _single_ Product object, or a list of ProductSections.\n     * @throws If products is a product list and more than 10 sections are provided\n     * @throws If products is a product list with more than 1 section and at least one section is missing a title\n     */\n    constructor(\n        catalog_id: string,\n        ...products: [Product] | AtLeastOne<ProductSection>\n    ) {\n        const is_sections = isProductSections(products);\n\n        if (is_sections) {\n            if (products.length > 1) {\n                if (products.length > 10)\n                    throw new Error(\n                        \"Catalog must have between 1 and 10 product sections\"\n                    );\n                for (const obj of products) {\n                    if (!(\"title\" in obj)) {\n                        throw new Error(\n                            \"All sections must have a title if more than 1 section is provided\"\n                        );\n                    }\n                }\n            }\n        }\n\n        this.catalog_id = catalog_id;\n\n        if (is_sections) this.sections = products;\n        else this.product_retailer_id = products[0].product_retailer_id;\n    }\n}\n", "import { ClientMessage, type ClientMessageNames } from \"../types.js\";\n\n/**\n * Abstract class for all the media types\n *\n * @group Media\n */\nexport abstract class Media extends ClientMessage {\n    /**\n     * The id of the media\n     */\n    readonly id?: string;\n    /**\n     * The link of the media\n     */\n    readonly link?: string;\n\n    /**\n     * @override\n     */\n    abstract get _type(): ClientMessageNames;\n\n    /**\n     * @param file - File to be sent\n     * @param isItAnID - If the file is an ID (true) or an URL (false)\n     */\n    constructor(file: string, isItAnID = false) {\n        super();\n        this[isItAnID ? \"id\" : \"link\"] = file;\n    }\n}\n\n/**\n * Audio API component\n *\n * @group Media\n */\nexport class Audio extends Media {\n    /**\n     * @override\n     */\n    get _type(): \"audio\" {\n        return \"audio\";\n    }\n\n    /**\n     * Create an Audio object for the API\n     *\n     * @param audio - The audio file's link or id\n     * @param isItAnID - Whether audio is an id (true) or a link (false)\n     */\n    constructor(audio: string, isItAnID = false) {\n        super(audio, isItAnID);\n    }\n}\n\n/**\n * Document API component\n *\n * @group Media\n */\nexport class Document extends Media {\n    /**\n     * The file's caption\n     */\n    readonly caption?: string;\n    /**\n     * The file's filename\n     */\n    readonly filename?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"document\" {\n        return \"document\";\n    }\n\n    /**\n     * Create a Document object for the API\n     *\n     * @param document - The document file's link or id\n     * @param isItAnID - Whether document is an id (true) or a link (false)\n     * @param caption - Describes the specified document media\n     * @param filename - Describes the filename for the specific document\n     */\n    constructor(\n        document: string,\n        isItAnID = false,\n        caption?: string,\n        filename?: string\n    ) {\n        super(document, isItAnID);\n        if (caption) this.caption = caption;\n        if (filename) this.filename = filename;\n    }\n}\n\n/**\n * Image API component\n *\n * @group Media\n */\nexport class Image extends Media {\n    /**\n     * The file's caption\n     */\n    readonly caption?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"image\" {\n        return \"image\";\n    }\n\n    /**\n     * Create a Image object for the API\n     *\n     * @param image - The image file's link or id\n     * @param isItAnID - Whether image is an id (true) or a link (false)\n     * @param caption - Describes the specified image media\n     */\n    constructor(image: string, isItAnID = false, caption?: string) {\n        super(image, isItAnID);\n        if (caption) this.caption = caption;\n    }\n}\n\n/**\n * Sticker API component\n *\n * @group Media\n */\nexport class Sticker extends Media {\n    /**\n     * @override\n     */\n    get _type(): \"sticker\" {\n        return \"sticker\";\n    }\n\n    /**\n     * Create a Sticker object for the API\n     *\n     * @param sticker - The sticker file's link\n     * @param isItAnID - Whether sticker is an id (true) or a link (false)\n     */\n    constructor(sticker: string, isItAnID = false) {\n        super(sticker, isItAnID);\n    }\n}\n\n/**\n * Video API component\n *\n * @group Media\n */\nexport class Video extends Media {\n    /**\n     * The file's caption\n     */\n    readonly caption?: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"video\" {\n        return \"video\";\n    }\n\n    /**\n     * Create a Video object for the API\n     *\n     * @param video - The video file's link\n     * @param isItAnID - Whether video is an id (true) or a link (false)\n     * @param caption - Describes the specified video media\n     */\n    constructor(video: string, isItAnID = false, caption?: string) {\n        super(video, isItAnID);\n        if (caption) this.caption = caption;\n    }\n}\n", "import {\n    ClientMessage,\n    ClientLimitedMessageComponent,\n    type ClientBuildableMessageComponent,\n    type ClientTypedMessageComponent\n} from \"../types.js\";\nimport type { AtLeastOne } from \"../utils\";\n\nimport type Location from \"./location\";\nimport type { Document, Image, Video } from \"./media\";\n\n/**\n * @group Template\n */\nexport type BuiltButtonComponent = {\n    type: \"button\";\n    sub_type: \"url\" | \"quick_reply\";\n    index: string;\n    parameters: Array<ButtonParameter>;\n};\n\n/**\n * Template API object\n *\n * @group Template\n */\nexport class Template extends ClientMessage {\n    /**\n     * The name of the template\n     */\n    readonly name: string;\n    /**\n     * The language of the template\n     */\n    readonly language: Language;\n    /**\n     * The components of the template\n     */\n    readonly components?: (\n        | HeaderComponent\n        | BodyComponent\n        | BuiltButtonComponent\n    )[];\n\n    /**\n     * @override\n     */\n    get _type(): \"template\" {\n        return \"template\";\n    }\n\n    // eslint-disable-next-line tsdoc/syntax\n    /** @todo Find out if more than one of each component is allowed */\n    /**\n     * Create a Template object for the API\n     *\n     * @param name - Name of the template\n     * @param language - The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     * @param components - Components objects containing the parameters of the message. For text-based templates, the only supported component is BodyComponent.\n     */\n    constructor(\n        name: string,\n        language: string | Language,\n        ...components: (HeaderComponent | BodyComponent | ButtonComponent)[]\n    ) {\n        super();\n        this.name = name;\n        this.language =\n            typeof language === \"string\" ? new Language(language) : language;\n        if (components.length) {\n            const theres_only_body =\n                components.length === 1 &&\n                components[0] instanceof BodyComponent;\n            this.components = components\n                .map((cmpt) => cmpt._build(theres_only_body))\n                .flat();\n        }\n    }\n\n    /**\n     * OTP Template generator\n     *\n     * @param name - Name of the template\n     * @param language - The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     * @param code - The one time password to be sent\n     * @returns A Template object for the API\n     */\n    static OTP(name: string, language: string | Language, code: string) {\n        return new Template(\n            name,\n            language,\n            new BodyComponent(new BodyParameter(code)),\n            new ButtonComponent(\"url\", code)\n        );\n    }\n}\n\n/**\n * Language API object\n *\n * @group Template\n */\nexport class Language {\n    /**\n     * The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     */\n    readonly code: string;\n    /**\n     * The language policy\n     */\n    readonly policy: \"deterministic\";\n\n    /**\n     * Create a Language component for a Template message\n     *\n     * @param code - The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     * @param policy - The language policy the message should follow. The only supported option is 'deterministic'.\n     */\n    constructor(code: string, policy: \"deterministic\" = \"deterministic\") {\n        this.policy = policy;\n        this.code = code;\n    }\n}\n\n/**\n * Currency API object\n *\n * @group Template\n */\nexport class Currency implements ClientTypedMessageComponent {\n    /**\n     * The amount of the currency by 1000\n     */\n    readonly amount_1000: number;\n    /**\n     * The currency code\n     */\n    readonly code: string;\n    /**\n     * The fallback value\n     */\n    readonly fallback_value: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"currency\" {\n        return \"currency\";\n    }\n\n    /**\n     * Builds a currency object for a Parameter\n     *\n     * @param amount_1000 - Amount multiplied by 1000\n     * @param code - Currency code as defined in ISO 4217\n     * @param fallback_value - Default text if localization fails\n     * @throws If amount_1000 is not greater than 0\n     */\n    constructor(amount_1000: number, code: string, fallback_value: string) {\n        if (amount_1000 <= 0)\n            throw new Error(\"Currency must have an amount_1000 greater than 0\");\n\n        this.amount_1000 = amount_1000;\n        this.code = code;\n        this.fallback_value = fallback_value;\n    }\n}\n\n/**\n * DateTime API object\n *\n * @group Template\n */\nexport class DateTime implements ClientTypedMessageComponent {\n    /**\n     * The fallback value\n     */\n    readonly fallback_value: string;\n\n    /**\n     * @override\n     */\n    get _type(): \"date_time\" {\n        return \"date_time\";\n    }\n\n    /**\n     * Builds a date_time object for a Parameter\n     *\n     * @param fallback_value - Default text. For Cloud API, we always use the fallback value, and we do not attempt to localize using other optional fields.\n     */\n    constructor(fallback_value: string) {\n        this.fallback_value = fallback_value;\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class ButtonComponent\n    extends ClientLimitedMessageComponent<string, 3>\n    implements ClientBuildableMessageComponent\n{\n    /**\n     * The type of the component\n     */\n    readonly type: \"button\";\n    /**\n     * The subtype of the component\n     */\n    readonly sub_type: \"url\" | \"quick_reply\";\n    /**\n     * The ButtonParameters to be used in the build function\n     */\n    readonly parameters: (ButtonParameter | null)[];\n\n    /**\n     * Builds a button component for a Template message.\n     * The index of the buttons is defined by the order in which you add them to the Template parameters.\n     *\n     * @remarks\n     * Empty strings are not allowed in the API. However, rather than being ignored or throwing an\n     * error, the constructor will use them as dummies for fake variables.\n     *\n     * You might want to know _why_. So do I. It's a really dumb catch to fix an issue on the API\n     * side. If you have a template with 2 buttons, the first one a phone number (which can't take\n     * variables), and an url button (which can have variables), the API will throw an error because\n     * the first button can't take variables, even though it DOESN'T need a variable.\n     *\n     * For such cases, the expected code would be:\n     *\n     * ```ts\n     * const template = new Template(\n     *     \"name\",\n     *     \"en_US\",\n     *     new ButtonComponent(\n     *         \"url\",\n     *         \"\", // As the first button is a phone, skip assigning it a variable\n     *         \"?user=123\"\n     *     )\n     * );\n     * ```\n     *\n     * @param sub_type - The type of button to create.\n     * @param parameters - Parameter for each button. The index of each parameter is defined by the order they are sent to the constructor.\n     * @throws If parameters is over 3 elements\n     */\n    constructor(\n        sub_type: \"url\" | \"quick_reply\",\n        ...parameters: AtLeastOne<string>\n    ) {\n        super(\"ButtonComponent\", \"parameters\", parameters, 3);\n\n        const buttonType = sub_type === \"url\" ? \"text\" : \"payload\";\n        const processed = parameters.map((e) =>\n            e.length ? new ButtonParameter(e, buttonType) : null\n        );\n\n        this.type = \"button\";\n        this.sub_type = sub_type;\n        this.parameters = processed;\n    }\n\n    /**\n     * @override\n     */\n    _build(): Array<BuiltButtonComponent> {\n        return this.parameters\n            .map((p, i) => {\n                if (!p) return null;\n\n                return {\n                    type: this.type,\n                    sub_type: this.sub_type,\n                    index: i.toString(),\n                    parameters: [p]\n                };\n            })\n            .filter((e) => !!e) as Array<BuiltButtonComponent>;\n    }\n}\n\n/**\n * Button Parameter API object\n *\n * @group Template\n */\nexport class ButtonParameter {\n    /**\n     * The type of the button\n     */\n    readonly type: \"text\" | \"payload\";\n    /**\n     * The text of the button\n     */\n    readonly text?: string;\n    /**\n     * The payload of the button\n     */\n    readonly payload?: string;\n\n    /**\n     * Builds a button parameter for a ButtonComponent\n     *\n     * @param param - Developer-provided data that is used to fill in the template.\n     * @param type - The type of the button\n     * @throws If param is an empty string\n     */\n    constructor(param: string, type: \"text\" | \"payload\") {\n        if (!param.length) {\n            throw new Error(\"Button parameter can't be an empty string\");\n        }\n\n        this.type = type;\n        this[type] = param;\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class HeaderComponent implements ClientBuildableMessageComponent {\n    /**\n     * The type of the component\n     */\n    readonly type: \"header\";\n    /**\n     * The parameters of the component\n     */\n    readonly parameters: HeaderParameter[];\n\n    /**\n     * Builds a header component for a Template message\n     *\n     * @param parameters - Parameters of the body component\n     */\n    constructor(...parameters: AtLeastOne<HeaderParameter>) {\n        this.type = \"header\";\n        this.parameters = parameters;\n    }\n\n    /**\n     * @override\n     */\n    _build() {\n        return this;\n    }\n}\n\n/**\n * Parameter API object\n *\n * @group Template\n */\nexport class HeaderParameter {\n    /**\n     * The type of the parameter\n     */\n    readonly type:\n        | \"text\"\n        | \"currency\"\n        | \"date_time\"\n        | \"image\"\n        | \"document\"\n        | \"video\"\n        | \"location\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The currency of the parameter\n     */\n    readonly currency?: Currency;\n    /**\n     * The datetime of the parameter\n     */\n    readonly date_time?: DateTime;\n    /**\n     * The image of the parameter\n     */\n    readonly image?: Image;\n    /**\n     * The document of the parameter\n     */\n    readonly document?: Document;\n    /**\n     * The video of the parameter\n     */\n    readonly video?: Video;\n    /**\n     * The location of the parameter\n     */\n    readonly location?: Location;\n\n    /**\n     * Builds a parameter object for a HeaderComponent.\n     * For text parameter, the character limit is 60.\n     * For Document parameter, only PDF documents are supported for document-based message templates (not checked).\n     * For Location parameter, the location must have a name and address.\n     *\n     * @param parameter - The parameter to be used in the template's header\n     * @throws If parameter is a string and it's over 60 characters\n     * @throws If parameter is a Location and it doesn't have a name and address\n     */\n    constructor(\n        parameter:\n            | string\n            | Currency\n            | DateTime\n            | Image\n            | Document\n            | Video\n            | Location\n    ) {\n        if (typeof parameter === \"string\") {\n            if (parameter.length > 60)\n                throw new Error(\"Header text must be 60 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            if (\n                parameter._type === \"location\" &&\n                !(parameter.name && parameter.address)\n            ) {\n                throw new Error(\"Header location must have a name and address\");\n            }\n\n            this.type = parameter._type;\n        }\n\n        Object.defineProperty(this, this.type, {\n            value: parameter,\n            enumerable: true\n        });\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class BodyComponent implements ClientBuildableMessageComponent {\n    /**\n     * The type of the component\n     */\n    readonly type: \"body\";\n    /**\n     * The parameters of the component\n     */\n    readonly parameters: BodyParameter[];\n\n    /**\n     * Builds a body component for a Template message\n     *\n     * @param parameters - Parameters of the body component\n     */\n    constructor(...parameters: AtLeastOne<BodyParameter>) {\n        this.type = \"body\";\n        this.parameters = parameters;\n    }\n\n    /**\n     * @override\n     */\n    _build(theres_only_body: boolean) {\n        // If there are parameters and need to check for the shorter max text length\n        if (this.parameters && !theres_only_body) {\n            for (const param of this.parameters) {\n                if (param.text && param.text?.length > 1024) {\n                    throw new Error(\n                        \"Body text must be 1024 characters or less\"\n                    );\n                }\n            }\n        }\n\n        return this;\n    }\n}\n\n/**\n * Parameter API object\n *\n * @group Template\n */\nexport class BodyParameter {\n    /**\n     * The type of the parameter\n     */\n    readonly type: \"text\" | \"currency\" | \"date_time\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The currency of the parameter\n     */\n    readonly currency?: Currency;\n    /**\n     * The datetime of the parameter\n     */\n    readonly date_time?: DateTime;\n\n    /**\n     * Builds a parameter object for a BodyComponent.\n     * For text parameter, the character limit is 32768 if only one BodyComponent is used for the Template, else it's 1024.\n     *\n     * @param parameter - The parameter to be used in the template\n     * @throws If parameter is a string and it's over 32768 characters\n     * @throws If parameter is a string, there are other components in the Template and it's over 1024 characters\n     * @see BodyComponent._build The method that checks the 1024 character limit\n     */\n    constructor(parameter: string | Currency | DateTime) {\n        if (typeof parameter === \"string\") {\n            // Check the upper limit of the string length here\n            // If a shorter one is needed, check and throw an\n            // error on the build method of BodyComponent\n            if (parameter.length > 32_768)\n                throw new Error(\"Body text must be 32768 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            this.type = parameter._type;\n        }\n\n        Object.defineProperty(this, this.type, {\n            value: parameter,\n            enumerable: true\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["Product", "ProductSection", "contact", "ProductSection", "Product"]
}
